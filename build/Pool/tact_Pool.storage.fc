;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline {
    return ($bounce, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return (true, $to, $value, $mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_body(slice $to, int $value, int $bounce, cell $body) inline {
    return ($bounce, $to, $value, 0, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice $to, int $bounce, int $value, int $mode) inline {
    return ($bounce, $to, $value, $mode, null(), null(), null());
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: Operation
;; TLB: _ seqno:uint32 manager:address = Operation
;;

builder $Operation$_store(builder build_0, (int, slice) v) inline {
    var (v'seqno, v'manager) = v;
    build_0 = build_0.store_uint(v'seqno, 32);
    build_0 = __tact_store_address(build_0, v'manager);
    return build_0;
}

cell $Operation$_store_cell((int, slice) v) inline {
    return $Operation$_store(begin_cell(), v).end_cell();
}

(slice, ((int, slice))) $Operation$_load(slice sc_0) inline {
    var v'seqno = sc_0~load_uint(32);
    var v'manager = sc_0~__tact_load_address();
    return (sc_0, (v'seqno, v'manager));
}

((int, slice)) $Operation$_tensor_cast((int, slice) v) asm """
    NOP
""";

;;
;; Type: ExecuteOperation
;; Header: 0xdfda3ab4
;; TLB: execute_operation#dfda3ab4 operation:Operation{seqno:uint32,manager:address} signature1:^slice signature2:^slice signature3:^slice = ExecuteOperation
;;

(slice, (((int, slice), slice, slice, slice))) $ExecuteOperation$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3755621044);
    var v'operation = sc_0~$Operation$_load();
    var v'signature1 = sc_0~load_ref().begin_parse();
    var v'signature2 = sc_0~load_ref().begin_parse();
    var v'signature3 = sc_0~load_ref().begin_parse();
    return (sc_0, (v'operation, v'signature1, v'signature2, v'signature3));
}

;;
;; Type: UpdateContract
;; Header: 0x2eb108db
;; TLB: update_contract#2eb108db code:^slice data:Maybe ^slice = UpdateContract
;;

(slice, ((slice, slice))) $UpdateContract$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 783354075);
    var v'code = sc_0~load_ref().begin_parse();
    var v'data = sc_0~load_int(1) ? sc_0~load_ref().begin_parse() : null();
    return (sc_0, (v'code, v'data));
}

;;
;; Type: JettonTransfer
;; Header: 0x0f8a7ea5
;; TLB: jetton_transfer#0f8a7ea5 query_id:uint64 amount:coins destination:address response_destination:Maybe address custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = JettonTransfer
;;

builder $JettonTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref {
    var (v'query_id, v'amount, v'destination, v'response_destination, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 260734629, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'destination);
    build_0 = __tact_store_address_opt(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $JettonTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline {
    return $JettonTransfer$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice, cell, int, slice)) $JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int $query_id, int $amount, slice $destination, slice $response_destination, cell $custom_payload, int $forward_ton_amount, slice $forward_payload) inline {
    return ($query_id, $amount, $destination, $response_destination, $custom_payload, $forward_ton_amount, $forward_payload);
}

;;
;; Type: JettonTransferNotification
;; Header: 0x7362d09c
;; TLB: jetton_transfer_notification#7362d09c query_id:uint64 amount:coins sender:address forward_payload:remainder<slice> = JettonTransferNotification
;;

(slice, ((int, int, slice, slice))) $JettonTransferNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1935855772);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'sender = sc_0~__tact_load_address();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'amount, v'sender, v'forward_payload));
}

;;
;; Type: JettonBurn
;; Header: 0x595f07bc
;; TLB: jetton_burn#595f07bc query_id:uint64 amount:coins response_destination:address custom_payload:Maybe ^cell = JettonBurn
;;

builder $JettonBurn$_store(builder build_0, (int, int, slice, cell) v) inline {
    var (v'query_id, v'amount, v'response_destination, v'custom_payload) = v;
    build_0 = store_uint(build_0, 1499400124, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'response_destination);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    return build_0;
}

cell $JettonBurn$_store_cell((int, int, slice, cell) v) inline {
    return $JettonBurn$_store(begin_cell(), v).end_cell();
}

((int, int, slice, cell)) $JettonBurn$_constructor_query_id_amount_response_destination_custom_payload(int $query_id, int $amount, slice $response_destination, cell $custom_payload) inline {
    return ($query_id, $amount, $response_destination, $custom_payload);
}

;;
;; Type: JettonMint
;; Header: 0x89b71d09
;; TLB: jetton_mint#89b71d09 origin:address receiver:address amount:int257 custom_payload:Maybe ^cell forward_ton_amount:coins forward_payload:remainder<slice> = JettonMint
;;

builder $JettonMint$_store(builder build_0, (slice, slice, int, cell, int, slice) v) inline_ref {
    var (v'origin, v'receiver, v'amount, v'custom_payload, v'forward_ton_amount, v'forward_payload) = v;
    build_0 = store_uint(build_0, 2310479113, 32);
    build_0 = __tact_store_address(build_0, v'origin);
    build_0 = __tact_store_address(build_0, v'receiver);
    build_0 = build_0.store_int(v'amount, 257);
    build_0 = ~ null?(v'custom_payload) ? build_0.store_int(true, 1).store_ref(v'custom_payload) : build_0.store_int(false, 1);
    build_0 = build_0.store_coins(v'forward_ton_amount);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $JettonMint$_store_cell((slice, slice, int, cell, int, slice) v) inline {
    return $JettonMint$_store(begin_cell(), v).end_cell();
}

((slice, slice, int, cell, int, slice)) $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload(slice $origin, slice $receiver, int $amount, cell $custom_payload, int $forward_ton_amount, slice $forward_payload) inline {
    return ($origin, $receiver, $amount, $custom_payload, $forward_ton_amount, $forward_payload);
}

;;
;; Type: JettonUpdateContent
;; Header: 0x5b8f271d
;; TLB: jetton_update_content#5b8f271d jetton_content:^cell = JettonUpdateContent
;;

builder $JettonUpdateContent$_store(builder build_0, (cell) v) inline {
    var (v'jetton_content) = v;
    build_0 = store_uint(build_0, 1536108317, 32);
    build_0 = build_0.store_ref(v'jetton_content);
    return build_0;
}

cell $JettonUpdateContent$_store_cell((cell) v) inline {
    return $JettonUpdateContent$_store(begin_cell(), v).end_cell();
}

(slice, ((cell))) $JettonUpdateContent$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1536108317);
    var v'jetton_content = sc_0~load_ref();
    return (sc_0, (v'jetton_content));
}

;;
;; Type: UpdatePoolConfig
;; Header: 0xa62f856c
;; TLB: update_pool_config#a62f856c orderLockTime:uint32 maxLpNetCap:coins lpRolloverFeeRate:uint32 liquidatedPositionShareRate:uint32 normalPositionShareRate:uint32 = UpdatePoolConfig
;;

(slice, ((int, int, int, int, int))) $UpdatePoolConfig$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2788132204);
    var v'orderLockTime = sc_0~load_uint(32);
    var v'maxLpNetCap = sc_0~load_coins();
    var v'lpRolloverFeeRate = sc_0~load_uint(32);
    var v'liquidatedPositionShareRate = sc_0~load_uint(32);
    var v'normalPositionShareRate = sc_0~load_uint(32);
    return (sc_0, (v'orderLockTime, v'maxLpNetCap, v'lpRolloverFeeRate, v'liquidatedPositionShareRate, v'normalPositionShareRate));
}

;;
;; Type: GasConfig
;; TLB: _ lpMinExecutionFee:coins perpMinExecutionFee:coins gasForPerpTrader:coins gasForPerpExecutor:coins gasForLpTrader:coins gasForLpExecutor:coins minTonsForStorage:coins gasForTransferJetton:coins gasForBurnTlp:coins gasForMintTlp:coins = GasConfig
;;

(slice, ((int, int, int, int, int, int, int, int, int, int))) $GasConfig$_load(slice sc_0) inline_ref {
    var v'lpMinExecutionFee = sc_0~load_coins();
    var v'perpMinExecutionFee = sc_0~load_coins();
    var v'gasForPerpTrader = sc_0~load_coins();
    var v'gasForPerpExecutor = sc_0~load_coins();
    var v'gasForLpTrader = sc_0~load_coins();
    var v'gasForLpExecutor = sc_0~load_coins();
    var v'minTonsForStorage = sc_0~load_coins();
    var v'gasForTransferJetton = sc_0~load_coins();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'gasForBurnTlp = sc_1~load_coins();
    var v'gasForMintTlp = sc_1~load_coins();
    return (sc_0, (v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp));
}

tuple $GasConfig$_as_optional((int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp) = v;
    return __tact_tuple_create_10(v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp);
}

_ $GasConfig$_get_lpMinExecutionFee((int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp) = v;
    return v'lpMinExecutionFee;
}

_ $GasConfig$_get_perpMinExecutionFee((int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp) = v;
    return v'perpMinExecutionFee;
}

_ $GasConfig$_get_gasForPerpTrader((int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp) = v;
    return v'gasForPerpTrader;
}

_ $GasConfig$_get_gasForPerpExecutor((int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp) = v;
    return v'gasForPerpExecutor;
}

_ $GasConfig$_get_gasForLpTrader((int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp) = v;
    return v'gasForLpTrader;
}

_ $GasConfig$_get_gasForLpExecutor((int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp) = v;
    return v'gasForLpExecutor;
}

_ $GasConfig$_get_minTonsForStorage((int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp) = v;
    return v'minTonsForStorage;
}

_ $GasConfig$_get_gasForTransferJetton((int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp) = v;
    return v'gasForTransferJetton;
}

_ $GasConfig$_get_gasForBurnTlp((int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp) = v;
    return v'gasForBurnTlp;
}

_ $GasConfig$_get_gasForMintTlp((int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp) = v;
    return v'gasForMintTlp;
}

((int, int, int, int, int, int, int, int, int, int)) $GasConfig$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'lpMinExecutionFee, int vvv'perpMinExecutionFee, int vvv'gasForPerpTrader, int vvv'gasForPerpExecutor, int vvv'gasForLpTrader, int vvv'gasForLpExecutor, int vvv'minTonsForStorage, int vvv'gasForTransferJetton, int vvv'gasForBurnTlp, int vvv'gasForMintTlp) = __tact_tuple_destroy_10(v);
    return (vvv'lpMinExecutionFee, vvv'perpMinExecutionFee, vvv'gasForPerpTrader, vvv'gasForPerpExecutor, vvv'gasForLpTrader, vvv'gasForLpExecutor, vvv'minTonsForStorage, vvv'gasForTransferJetton, vvv'gasForBurnTlp, vvv'gasForMintTlp);
}

;;
;; Type: ExecutorConfig
;; TLB: _ executors:dict<address, bool> compensator:address claimer:address = ExecutorConfig
;;

(slice, ((cell, slice, slice))) $ExecutorConfig$_load(slice sc_0) inline {
    var v'executors = sc_0~load_dict();
    var v'compensator = sc_0~__tact_load_address();
    var v'claimer = sc_0~__tact_load_address();
    return (sc_0, (v'executors, v'compensator, v'claimer));
}

tuple $ExecutorConfig$_as_optional((cell, slice, slice) v) inline {
    var (v'executors, v'compensator, v'claimer) = v;
    return __tact_tuple_create_3(v'executors, v'compensator, v'claimer);
}

_ $ExecutorConfig$_get_executors((cell, slice, slice) v) inline {
    var (v'executors, v'compensator, v'claimer) = v;
    return v'executors;
}

_ $ExecutorConfig$_get_compensator((cell, slice, slice) v) inline {
    var (v'executors, v'compensator, v'claimer) = v;
    return v'compensator;
}

_ $ExecutorConfig$_get_claimer((cell, slice, slice) v) inline {
    var (v'executors, v'compensator, v'claimer) = v;
    return v'claimer;
}

((cell, slice, slice)) $ExecutorConfig$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'executors, slice vvv'compensator, slice vvv'claimer) = __tact_tuple_destroy_3(v);
    return (vvv'executors, vvv'compensator, vvv'claimer);
}

;;
;; Type: ContractConfig
;; TLB: _ tlpJetton:address tlpWallet:address jettonWallet:address = ContractConfig
;;

(slice, ((slice, slice, slice))) $ContractConfig$_load(slice sc_0) inline {
    var v'tlpJetton = sc_0~__tact_load_address();
    var v'tlpWallet = sc_0~__tact_load_address();
    var v'jettonWallet = sc_0~__tact_load_address();
    return (sc_0, (v'tlpJetton, v'tlpWallet, v'jettonWallet));
}

tuple $ContractConfig$_as_optional((slice, slice, slice) v) inline {
    var (v'tlpJetton, v'tlpWallet, v'jettonWallet) = v;
    return __tact_tuple_create_3(v'tlpJetton, v'tlpWallet, v'jettonWallet);
}

_ $ContractConfig$_get_tlpJetton((slice, slice, slice) v) inline {
    var (v'tlpJetton, v'tlpWallet, v'jettonWallet) = v;
    return v'tlpJetton;
}

_ $ContractConfig$_get_tlpWallet((slice, slice, slice) v) inline {
    var (v'tlpJetton, v'tlpWallet, v'jettonWallet) = v;
    return v'tlpWallet;
}

_ $ContractConfig$_get_jettonWallet((slice, slice, slice) v) inline {
    var (v'tlpJetton, v'tlpWallet, v'jettonWallet) = v;
    return v'jettonWallet;
}

((slice, slice, slice)) $ContractConfig$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'tlpJetton, slice vvv'tlpWallet, slice vvv'jettonWallet) = __tact_tuple_destroy_3(v);
    return (vvv'tlpJetton, vvv'tlpWallet, vvv'jettonWallet);
}

;;
;; Type: UpdateConfig
;; Header: 0xb0a69508
;; TLB: update_config#b0a69508 gasConfig:Maybe GasConfig{lpMinExecutionFee:coins,perpMinExecutionFee:coins,gasForPerpTrader:coins,gasForPerpExecutor:coins,gasForLpTrader:coins,gasForLpExecutor:coins,minTonsForStorage:coins,gasForTransferJetton:coins,gasForBurnTlp:coins,gasForMintTlp:coins} executorConfig:Maybe ExecutorConfig{executors:dict<address, bool>,compensator:address,claimer:address} contractConfig:Maybe ContractConfig{tlpJetton:address,tlpWallet:address,jettonWallet:address} = UpdateConfig
;;

(slice, ((tuple, tuple, tuple))) $UpdateConfig$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2963707144);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'gasConfig = sc_1~load_int(1) ? $GasConfig$_as_optional(sc_1~$GasConfig$_load()) : null();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'executorConfig = sc_2~load_int(1) ? $ExecutorConfig$_as_optional(sc_2~$ExecutorConfig$_load()) : null();
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'contractConfig = sc_3~load_int(1) ? $ContractConfig$_as_optional(sc_3~$ContractConfig$_load()) : null();
    return (sc_0, (v'gasConfig, v'executorConfig, v'contractConfig));
}

;;
;; Type: TokenConfig
;; TLB: _ name:^string enable:bool maxLeverage:uint16 liquidationFee:coins maintenanceRate:uint32 tradingFeeRate:uint32 lpTradingFeeRate:uint32 = TokenConfig
;;

builder $TokenConfig$_store(builder build_0, (slice, int, int, int, int, int, int) v) inline_ref {
    var (v'name, v'enable, v'maxLeverage, v'liquidationFee, v'maintenanceRate, v'tradingFeeRate, v'lpTradingFeeRate) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'name).end_cell());
    build_0 = build_0.store_int(v'enable, 1);
    build_0 = build_0.store_uint(v'maxLeverage, 16);
    build_0 = build_0.store_coins(v'liquidationFee);
    build_0 = build_0.store_uint(v'maintenanceRate, 32);
    build_0 = build_0.store_uint(v'tradingFeeRate, 32);
    build_0 = build_0.store_uint(v'lpTradingFeeRate, 32);
    return build_0;
}

cell $TokenConfig$_store_cell((slice, int, int, int, int, int, int) v) inline {
    return $TokenConfig$_store(begin_cell(), v).end_cell();
}

(slice, ((slice, int, int, int, int, int, int))) $TokenConfig$_load(slice sc_0) inline_ref {
    var v'name = sc_0~load_ref().begin_parse();
    var v'enable = sc_0~load_int(1);
    var v'maxLeverage = sc_0~load_uint(16);
    var v'liquidationFee = sc_0~load_coins();
    var v'maintenanceRate = sc_0~load_uint(32);
    var v'tradingFeeRate = sc_0~load_uint(32);
    var v'lpTradingFeeRate = sc_0~load_uint(32);
    return (sc_0, (v'name, v'enable, v'maxLeverage, v'liquidationFee, v'maintenanceRate, v'tradingFeeRate, v'lpTradingFeeRate));
}

tuple $TokenConfig$_as_optional((slice, int, int, int, int, int, int) v) inline {
    var (v'name, v'enable, v'maxLeverage, v'liquidationFee, v'maintenanceRate, v'tradingFeeRate, v'lpTradingFeeRate) = v;
    return __tact_tuple_create_7(v'name, v'enable, v'maxLeverage, v'liquidationFee, v'maintenanceRate, v'tradingFeeRate, v'lpTradingFeeRate);
}

tuple $TokenConfig$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $TokenConfig$_as_optional(sc~$TokenConfig$_load());
}

((slice, int, int, int, int, int, int)) $TokenConfig$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'name, int vvv'enable, int vvv'maxLeverage, int vvv'liquidationFee, int vvv'maintenanceRate, int vvv'tradingFeeRate, int vvv'lpTradingFeeRate) = __tact_tuple_destroy_7(v);
    return (vvv'name, vvv'enable, vvv'maxLeverage, vvv'liquidationFee, vvv'maintenanceRate, vvv'tradingFeeRate, vvv'lpTradingFeeRate);
}

tuple $TokenConfig$_to_tuple(((slice, int, int, int, int, int, int)) v) inline {
    var (v'name, v'enable, v'maxLeverage, v'liquidationFee, v'maintenanceRate, v'tradingFeeRate, v'lpTradingFeeRate) = v;
    return __tact_tuple_create_7(v'name, v'enable, v'maxLeverage, v'liquidationFee, v'maintenanceRate, v'tradingFeeRate, v'lpTradingFeeRate);
}

tuple $TokenConfig$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $TokenConfig$_to_tuple($TokenConfig$_not_null(v)); 
}

tuple $TokenConfig$_to_opt_external(tuple v) inline {
    var loaded = $TokenConfig$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

;;
;; Type: ListToken
;; Header: 0xe49b3bf0
;; TLB: list_token#e49b3bf0 tokenId:uint16 config:TokenConfig{name:^string,enable:bool,maxLeverage:uint16,liquidationFee:coins,maintenanceRate:uint32,tradingFeeRate:uint32,lpTradingFeeRate:uint32} = ListToken
;;

(slice, ((int, (slice, int, int, int, int, int, int)))) $ListToken$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3835378672);
    var v'tokenId = sc_0~load_uint(16);
    var v'config = sc_0~$TokenConfig$_load();
    return (sc_0, (v'tokenId, v'config));
}

;;
;; Type: DelistToken
;; Header: 0x9b42e4ef
;; TLB: delist_token#9b42e4ef tokenId:uint16 = DelistToken
;;

(slice, ((int))) $DelistToken$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2604852463);
    var v'tokenId = sc_0~load_uint(16);
    return (sc_0, (v'tokenId));
}

;;
;; Type: ClaimProtocolFee
;; Header: 0xfeb2a766
;; TLB: claim_protocol_fee#feb2a766 trxId:uint64 feeReceiver:address = ClaimProtocolFee
;;

(slice, ((int, slice))) $ClaimProtocolFee$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4273121126);
    var v'trxId = sc_0~load_uint(64);
    var v'feeReceiver = sc_0~__tact_load_address();
    return (sc_0, (v'trxId, v'feeReceiver));
}

;;
;; Type: CancelLiquidityOrder
;; Header: 0x481e7561
;; TLB: cancel_liquidity_order#481e7561 orderId:uint64 trxId:uint64 executionFeeReceiver:Maybe address = CancelLiquidityOrder
;;

(slice, ((int, int, slice))) $CancelLiquidityOrder$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1209955681);
    var v'orderId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    var v'executionFeeReceiver = sc_0~__tact_load_address_opt();
    return (sc_0, (v'orderId, v'trxId, v'executionFeeReceiver));
}

;;
;; Type: ExecuteLiquidityOrder
;; Header: 0xabcf587b
;; TLB: execute_liquidity_order#abcf587b orderId:uint64 trxId:uint64 executionFeeReceiver:Maybe address prices:dict<uint16, uint128> lpFundingFeeGrowth:coins rolloverFeeGrowth:coins = ExecuteLiquidityOrder
;;

(slice, ((int, int, slice, cell, int, int))) $ExecuteLiquidityOrder$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2882492539);
    var v'orderId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    var v'executionFeeReceiver = sc_0~__tact_load_address_opt();
    var v'prices = sc_0~load_dict();
    var v'lpFundingFeeGrowth = sc_0~load_coins();
    var v'rolloverFeeGrowth = sc_0~load_coins();
    return (sc_0, (v'orderId, v'trxId, v'executionFeeReceiver, v'prices, v'lpFundingFeeGrowth, v'rolloverFeeGrowth));
}

;;
;; Type: CreateDecreasePerpOrder
;; Header: 0xeef5924d
;; TLB: create_decrease_perp_order#eef5924d executionFee:coins tokenId:uint16 isLong:bool marginDelta:coins sizeDelta:coins triggerPrice:uint128 trxId:uint64 requestTime:uint32 = CreateDecreasePerpOrder
;;

(slice, ((int, int, int, int, int, int, int, int))) $CreateDecreasePerpOrder$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 4009071181);
    var v'executionFee = sc_0~load_coins();
    var v'tokenId = sc_0~load_uint(16);
    var v'isLong = sc_0~load_int(1);
    var v'marginDelta = sc_0~load_coins();
    var v'sizeDelta = sc_0~load_coins();
    var v'triggerPrice = sc_0~load_uint(128);
    var v'trxId = sc_0~load_uint(64);
    var v'requestTime = sc_0~load_uint(32);
    return (sc_0, (v'executionFee, v'tokenId, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'trxId, v'requestTime));
}

;;
;; Type: CreateTpSlPerpOrder
;; Header: 0xf94f80bb
;; TLB: create_tp_sl_perp_order#f94f80bb executionFee:coins tokenId:uint16 isLong:bool tpSize:coins tpPrice:uint128 slSize:coins slPrice:uint128 trxId:uint64 requestTime:uint32 = CreateTpSlPerpOrder
;;

(slice, ((int, int, int, int, int, int, int, int, int))) $CreateTpSlPerpOrder$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 4182737083);
    var v'executionFee = sc_0~load_coins();
    var v'tokenId = sc_0~load_uint(16);
    var v'isLong = sc_0~load_int(1);
    var v'tpSize = sc_0~load_coins();
    var v'tpPrice = sc_0~load_uint(128);
    var v'slSize = sc_0~load_coins();
    var v'slPrice = sc_0~load_uint(128);
    var v'trxId = sc_0~load_uint(64);
    var v'requestTime = sc_0~load_uint(32);
    return (sc_0, (v'executionFee, v'tokenId, v'isLong, v'tpSize, v'tpPrice, v'slSize, v'slPrice, v'trxId, v'requestTime));
}

;;
;; Type: CancelPerpOrder
;; Header: 0x099ff4a3
;; TLB: cancel_perp_order#099ff4a3 executionFeeReceiver:Maybe address orderId:uint64 trxId:uint64 = CancelPerpOrder
;;

(slice, ((slice, int, int))) $CancelPerpOrder$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 161477795);
    var v'executionFeeReceiver = sc_0~__tact_load_address_opt();
    var v'orderId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    return (sc_0, (v'executionFeeReceiver, v'orderId, v'trxId));
}

;;
;; Type: ExecutePerpOrder
;; Header: 0xed76926e
;; TLB: execute_perp_order#ed76926e executionFeeReceiver:Maybe address orderId:uint64 trxId:uint64 tokenId:uint16 price:uint128 premiumRate:int32 fundingFeeGrowth:int128 rolloverFeeGrowth:int128 = ExecutePerpOrder
;;

(slice, ((slice, int, int, int, int, int, int, int))) $ExecutePerpOrder$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 3983970926);
    var v'executionFeeReceiver = sc_0~__tact_load_address_opt();
    var v'orderId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    var v'tokenId = sc_0~load_uint(16);
    var v'price = sc_0~load_uint(128);
    var v'premiumRate = sc_0~load_int(32);
    var v'fundingFeeGrowth = sc_0~load_int(128);
    var v'rolloverFeeGrowth = sc_0~load_int(128);
    return (sc_0, (v'executionFeeReceiver, v'orderId, v'trxId, v'tokenId, v'price, v'premiumRate, v'fundingFeeGrowth, v'rolloverFeeGrowth));
}

;;
;; Type: LiquidatePerpPosition
;; Header: 0x46ded352
;; TLB: liquidate_perp_position#46ded352 liquidationFeeReceiver:Maybe address tokenId:uint16 account:address isLong:bool trxId:uint64 price:uint128 premiumRate:int32 fundingFeeGrowth:int128 rolloverFeeGrowth:int128 = LiquidatePerpPosition
;;

(slice, ((slice, int, slice, int, int, int, int, int, int))) $LiquidatePerpPosition$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 1189008210);
    var v'liquidationFeeReceiver = sc_0~__tact_load_address_opt();
    var v'tokenId = sc_0~load_uint(16);
    var v'account = sc_0~__tact_load_address();
    var v'isLong = sc_0~load_int(1);
    var v'trxId = sc_0~load_uint(64);
    var v'price = sc_0~load_uint(128);
    var v'premiumRate = sc_0~load_int(32);
    var v'fundingFeeGrowth = sc_0~load_int(128);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'rolloverFeeGrowth = sc_1~load_int(128);
    return (sc_0, (v'liquidationFeeReceiver, v'tokenId, v'account, v'isLong, v'trxId, v'price, v'premiumRate, v'fundingFeeGrowth, v'rolloverFeeGrowth));
}

;;
;; Type: ADLPerpPosition
;; Header: 0xd5debfdc
;; TLB: adl_perp_position#d5debfdc tokenId:uint16 account:address isLong:bool marginDelta:coins sizeDelta:coins trxId:uint64 price:uint128 premiumRate:int32 fundingFeeGrowth:int128 rolloverFeeGrowth:int128 = ADLPerpPosition
;;

(slice, ((int, slice, int, int, int, int, int, int, int, int))) $ADLPerpPosition$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 3588145116);
    var v'tokenId = sc_0~load_uint(16);
    var v'account = sc_0~__tact_load_address();
    var v'isLong = sc_0~load_int(1);
    var v'marginDelta = sc_0~load_coins();
    var v'sizeDelta = sc_0~load_coins();
    var v'trxId = sc_0~load_uint(64);
    var v'price = sc_0~load_uint(128);
    var v'premiumRate = sc_0~load_int(32);
    var v'fundingFeeGrowth = sc_0~load_int(128);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'rolloverFeeGrowth = sc_1~load_int(128);
    return (sc_0, (v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'trxId, v'price, v'premiumRate, v'fundingFeeGrowth, v'rolloverFeeGrowth));
}

;;
;; Type: CreateCompensate
;; Header: 0xfc33877d
;; TLB: create_compensate#fc33877d orderType:Maybe uint8 orderId:uint64 trxId:uint64 refundReceiver:Maybe address refundAmount:coins executionFeeReceiver:Maybe address executionFee:coins = CreateCompensate
;;

(slice, ((int, int, int, slice, int, slice, int))) $CreateCompensate$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 4231235453);
    var v'orderType = sc_0~load_int(1) ? sc_0~load_uint(8) : null();
    var v'orderId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    var v'refundReceiver = sc_0~__tact_load_address_opt();
    var v'refundAmount = sc_0~load_coins();
    var v'executionFeeReceiver = sc_0~__tact_load_address_opt();
    var v'executionFee = sc_0~load_coins();
    return (sc_0, (v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee));
}

;;
;; Type: ExecuteOrCancelCompensate
;; Header: 0x88e7f927
;; TLB: execute_or_cancel_compensate#88e7f927 isCancel:bool compensateId:uint64 trxId:uint64 = ExecuteOrCancelCompensate
;;

(slice, ((int, int, int))) $ExecuteOrCancelCompensate$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2296903975);
    var v'isCancel = sc_0~load_int(1);
    var v'compensateId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    return (sc_0, (v'isCancel, v'compensateId, v'trxId));
}

;;
;; Type: LiquidityOrderCreatedEvent
;; Header: 0xc4d020e4
;; TLB: liquidity_order_created_event#c4d020e4 opType:uint8 account:address jettonDelta:coins executionFee:coins orderId:uint64 trxId:uint64 = LiquidityOrderCreatedEvent
;;

builder $LiquidityOrderCreatedEvent$_store(builder build_0, (int, slice, int, int, int, int) v) inline_ref {
    var (v'opType, v'account, v'jettonDelta, v'executionFee, v'orderId, v'trxId) = v;
    build_0 = store_uint(build_0, 3301974244, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_coins(v'jettonDelta);
    build_0 = build_0.store_coins(v'executionFee);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $LiquidityOrderCreatedEvent$_store_cell((int, slice, int, int, int, int) v) inline {
    return $LiquidityOrderCreatedEvent$_store(begin_cell(), v).end_cell();
}

((int, slice, int, int, int, int)) $LiquidityOrderCreatedEvent$_constructor_opType_account_jettonDelta_executionFee_orderId_trxId(int $opType, slice $account, int $jettonDelta, int $executionFee, int $orderId, int $trxId) inline {
    return ($opType, $account, $jettonDelta, $executionFee, $orderId, $trxId);
}

;;
;; Type: LiquidityOrderCancelledEvent
;; Header: 0xb9b03cbc
;; TLB: liquidity_order_cancelled_event#b9b03cbc opType:uint8 orderId:uint64 trxId:uint64 = LiquidityOrderCancelledEvent
;;

builder $LiquidityOrderCancelledEvent$_store(builder build_0, (int, int, int) v) inline {
    var (v'opType, v'orderId, v'trxId) = v;
    build_0 = store_uint(build_0, 3115334844, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $LiquidityOrderCancelledEvent$_store_cell((int, int, int) v) inline {
    return $LiquidityOrderCancelledEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $LiquidityOrderCancelledEvent$_constructor_opType_orderId_trxId(int $opType, int $orderId, int $trxId) inline {
    return ($opType, $orderId, $trxId);
}

;;
;; Type: LiquidityPoolChangedEvent
;; Header: 0x48426f36
;; TLB: liquidity_pool_changed_event#48426f36 trxId:uint64 orderId:uint64 opType:uint8 account:address jettonDelta:coins tlpDelta:coins tlpPrice:uint128 tlpSupply:coins lpFundAfter:int128 realizedLpFundingFeeDelta:coins realizedLpRolloverFeeDelta:coins entryLpFundingFeeGrowth:coins entryRolloverFeeGrowth:coins = LiquidityPoolChangedEvent
;;

builder $LiquidityPoolChangedEvent$_store(builder build_0, (int, int, int, slice, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'trxId, v'orderId, v'opType, v'account, v'jettonDelta, v'tlpDelta, v'tlpPrice, v'tlpSupply, v'lpFundAfter, v'realizedLpFundingFeeDelta, v'realizedLpRolloverFeeDelta, v'entryLpFundingFeeGrowth, v'entryRolloverFeeGrowth) = v;
    build_0 = store_uint(build_0, 1212313398, 32);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_coins(v'jettonDelta);
    build_0 = build_0.store_coins(v'tlpDelta);
    build_0 = build_0.store_uint(v'tlpPrice, 128);
    build_0 = build_0.store_coins(v'tlpSupply);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'lpFundAfter, 128);
    build_1 = build_1.store_coins(v'realizedLpFundingFeeDelta);
    build_1 = build_1.store_coins(v'realizedLpRolloverFeeDelta);
    build_1 = build_1.store_coins(v'entryLpFundingFeeGrowth);
    build_1 = build_1.store_coins(v'entryRolloverFeeGrowth);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $LiquidityPoolChangedEvent$_store_cell((int, int, int, slice, int, int, int, int, int, int, int, int, int) v) inline {
    return $LiquidityPoolChangedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int, slice, int, int, int, int, int, int, int, int, int)) $LiquidityPoolChangedEvent$_constructor_trxId_orderId_opType_account_jettonDelta_tlpPrice_tlpDelta_tlpSupply_lpFundAfter_realizedLpFundingFeeDelta_realizedLpRolloverFeeDelta_entryLpFundingFeeGrowth_entryRolloverFeeGrowth(int $trxId, int $orderId, int $opType, slice $account, int $jettonDelta, int $tlpPrice, int $tlpDelta, int $tlpSupply, int $lpFundAfter, int $realizedLpFundingFeeDelta, int $realizedLpRolloverFeeDelta, int $entryLpFundingFeeGrowth, int $entryRolloverFeeGrowth) inline {
    return ($trxId, $orderId, $opType, $account, $jettonDelta, $tlpDelta, $tlpPrice, $tlpSupply, $lpFundAfter, $realizedLpFundingFeeDelta, $realizedLpRolloverFeeDelta, $entryLpFundingFeeGrowth, $entryRolloverFeeGrowth);
}

;;
;; Type: PerpOrderCreatedEvent
;; Header: 0xad8e31ef
;; TLB: perp_order_created_event#ad8e31ef opType:uint8 tokenId:uint16 account:address isLong:bool marginDelta:coins sizeDelta:coins triggerPrice:uint128 triggerAbove:bool executionFee:coins orderId:uint64 trxId:uint64 requestTime:uint32 = PerpOrderCreatedEvent
;;

builder $PerpOrderCreatedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'executionFee, v'orderId, v'trxId, v'requestTime) = v;
    build_0 = store_uint(build_0, 2911777263, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'tokenId, 16);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_coins(v'marginDelta);
    build_0 = build_0.store_coins(v'sizeDelta);
    build_0 = build_0.store_uint(v'triggerPrice, 128);
    build_0 = build_0.store_int(v'triggerAbove, 1);
    build_0 = build_0.store_coins(v'executionFee);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = build_0.store_uint(v'requestTime, 32);
    return build_0;
}

cell $PerpOrderCreatedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int, int, int) v) inline {
    return $PerpOrderCreatedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, slice, int, int, int, int, int, int, int, int, int)) $PerpOrderCreatedEvent$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_executionFee_orderId_triggerPrice_triggerAbove_requestTime_trxId(int $opType, int $tokenId, slice $account, int $isLong, int $marginDelta, int $sizeDelta, int $executionFee, int $orderId, int $triggerPrice, int $triggerAbove, int $requestTime, int $trxId) inline {
    return ($opType, $tokenId, $account, $isLong, $marginDelta, $sizeDelta, $triggerPrice, $triggerAbove, $executionFee, $orderId, $trxId, $requestTime);
}

;;
;; Type: PerpOrderCancelledEvent
;; Header: 0xf2c5aeac
;; TLB: perp_order_cancelled_event#f2c5aeac opType:uint8 orderId:uint64 trxId:uint64 = PerpOrderCancelledEvent
;;

builder $PerpOrderCancelledEvent$_store(builder build_0, (int, int, int) v) inline {
    var (v'opType, v'orderId, v'trxId) = v;
    build_0 = store_uint(build_0, 4073041580, 32);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $PerpOrderCancelledEvent$_store_cell((int, int, int) v) inline {
    return $PerpOrderCancelledEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $PerpOrderCancelledEvent$_constructor_opType_orderId_trxId(int $opType, int $orderId, int $trxId) inline {
    return ($opType, $orderId, $trxId);
}

;;
;; Type: PerpPositionIncreasedEvent
;; Header: 0x47596abe
;; TLB: perp_position_increased_event#47596abe trxId:uint64 orderId:uint64 opType:uint8 positionId:uint64 account:address tokenId:uint16 isLong:bool marginDelta:int128 marginAfter:coins sizeDelta:int128 sizeAfter:coins tradePrice:uint128 entryPrice:uint128 fundingFee:int128 rolloverFee:coins tradingFee:coins entryFundingFeeGrowthAfter:int128 entryRolloverFeeGrowthAfter:int128 globalLongMarginAfter:coins globalShortMarginAfter:coins globalLongSizeAfter:coins globalShortSizeAfter:coins globalLongValueAfter:coins globalShortValueAfter:coins lpNetSizeAfter:coins lpIsLong:bool lpEntryPriceAfter:uint128 lpFundAfter:int128 lpTradingFee:coins lpRealizedPnl:int128 = PerpPositionIncreasedEvent
;;

builder $PerpPositionIncreasedEvent$_store(builder build_0, (int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'trxId, v'orderId, v'opType, v'positionId, v'account, v'tokenId, v'isLong, v'marginDelta, v'marginAfter, v'sizeDelta, v'sizeAfter, v'tradePrice, v'entryPrice, v'fundingFee, v'rolloverFee, v'tradingFee, v'entryFundingFeeGrowthAfter, v'entryRolloverFeeGrowthAfter, v'globalLongMarginAfter, v'globalShortMarginAfter, v'globalLongSizeAfter, v'globalShortSizeAfter, v'globalLongValueAfter, v'globalShortValueAfter, v'lpNetSizeAfter, v'lpIsLong, v'lpEntryPriceAfter, v'lpFundAfter, v'lpTradingFee, v'lpRealizedPnl) = v;
    build_0 = store_uint(build_0, 1197042366, 32);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'positionId, 64);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_uint(v'tokenId, 16);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_int(v'marginDelta, 128);
    build_0 = build_0.store_coins(v'marginAfter);
    build_0 = build_0.store_int(v'sizeDelta, 128);
    build_0 = build_0.store_coins(v'sizeAfter);
    var build_1 = begin_cell();
    build_1 = build_1.store_uint(v'tradePrice, 128);
    build_1 = build_1.store_uint(v'entryPrice, 128);
    build_1 = build_1.store_int(v'fundingFee, 128);
    build_1 = build_1.store_coins(v'rolloverFee);
    build_1 = build_1.store_coins(v'tradingFee);
    build_1 = build_1.store_int(v'entryFundingFeeGrowthAfter, 128);
    build_1 = build_1.store_int(v'entryRolloverFeeGrowthAfter, 128);
    build_1 = build_1.store_coins(v'globalLongMarginAfter);
    var build_2 = begin_cell();
    build_2 = build_2.store_coins(v'globalShortMarginAfter);
    build_2 = build_2.store_coins(v'globalLongSizeAfter);
    build_2 = build_2.store_coins(v'globalShortSizeAfter);
    build_2 = build_2.store_coins(v'globalLongValueAfter);
    build_2 = build_2.store_coins(v'globalShortValueAfter);
    build_2 = build_2.store_coins(v'lpNetSizeAfter);
    build_2 = build_2.store_int(v'lpIsLong, 1);
    build_2 = build_2.store_uint(v'lpEntryPriceAfter, 128);
    build_2 = build_2.store_int(v'lpFundAfter, 128);
    var build_3 = begin_cell();
    build_3 = build_3.store_coins(v'lpTradingFee);
    build_3 = build_3.store_int(v'lpRealizedPnl, 128);
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $PerpPositionIncreasedEvent$_store_cell((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    return $PerpPositionIncreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionIncreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_rolloverFee_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_globalLongValueAfter_globalShortValueAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl(int $trxId, int $orderId, int $opType, int $positionId, slice $account, int $tokenId, int $isLong, int $marginDelta, int $marginAfter, int $sizeDelta, int $sizeAfter, int $tradePrice, int $entryPrice, int $tradingFee, int $fundingFee, int $rolloverFee, int $entryFundingFeeGrowthAfter, int $entryRolloverFeeGrowthAfter, int $globalLongMarginAfter, int $globalShortMarginAfter, int $globalLongSizeAfter, int $globalShortSizeAfter, int $globalLongValueAfter, int $globalShortValueAfter, int $lpNetSizeAfter, int $lpIsLong, int $lpEntryPriceAfter, int $lpFundAfter, int $lpTradingFee, int $lpRealizedPnl) inline {
    return ($trxId, $orderId, $opType, $positionId, $account, $tokenId, $isLong, $marginDelta, $marginAfter, $sizeDelta, $sizeAfter, $tradePrice, $entryPrice, $fundingFee, $rolloverFee, $tradingFee, $entryFundingFeeGrowthAfter, $entryRolloverFeeGrowthAfter, $globalLongMarginAfter, $globalShortMarginAfter, $globalLongSizeAfter, $globalShortSizeAfter, $globalLongValueAfter, $globalShortValueAfter, $lpNetSizeAfter, $lpIsLong, $lpEntryPriceAfter, $lpFundAfter, $lpTradingFee, $lpRealizedPnl);
}

;;
;; Type: PerpPositionDecreasedEvent
;; Header: 0x2353464c
;; TLB: perp_position_decreased_event#2353464c trxId:uint64 orderId:uint64 opType:uint8 positionId:uint64 account:address tokenId:uint16 isLong:bool marginDelta:int128 marginAfter:coins sizeDelta:int128 sizeAfter:coins tradePrice:uint128 entryPrice:uint128 realizedPnLDelta:int128 fundingFee:int128 rolloverFee:coins tradingFee:coins entryFundingFeeGrowthAfter:int128 entryRolloverFeeGrowthAfter:int128 payout:coins globalLongMarginAfter:coins globalShortMarginAfter:coins globalLongSizeAfter:coins globalShortSizeAfter:coins globalLongValueAfter:coins globalShortValueAfter:coins lpNetSizeAfter:coins lpIsLong:bool lpEntryPriceAfter:uint128 lpFundAfter:int128 lpTradingFee:coins lpRealizedPnl:int128 = PerpPositionDecreasedEvent
;;

builder $PerpPositionDecreasedEvent$_store(builder build_0, (int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'trxId, v'orderId, v'opType, v'positionId, v'account, v'tokenId, v'isLong, v'marginDelta, v'marginAfter, v'sizeDelta, v'sizeAfter, v'tradePrice, v'entryPrice, v'realizedPnLDelta, v'fundingFee, v'rolloverFee, v'tradingFee, v'entryFundingFeeGrowthAfter, v'entryRolloverFeeGrowthAfter, v'payout, v'globalLongMarginAfter, v'globalShortMarginAfter, v'globalLongSizeAfter, v'globalShortSizeAfter, v'globalLongValueAfter, v'globalShortValueAfter, v'lpNetSizeAfter, v'lpIsLong, v'lpEntryPriceAfter, v'lpFundAfter, v'lpTradingFee, v'lpRealizedPnl) = v;
    build_0 = store_uint(build_0, 592660044, 32);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'positionId, 64);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_uint(v'tokenId, 16);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_int(v'marginDelta, 128);
    build_0 = build_0.store_coins(v'marginAfter);
    build_0 = build_0.store_int(v'sizeDelta, 128);
    build_0 = build_0.store_coins(v'sizeAfter);
    var build_1 = begin_cell();
    build_1 = build_1.store_uint(v'tradePrice, 128);
    build_1 = build_1.store_uint(v'entryPrice, 128);
    build_1 = build_1.store_int(v'realizedPnLDelta, 128);
    build_1 = build_1.store_int(v'fundingFee, 128);
    build_1 = build_1.store_coins(v'rolloverFee);
    build_1 = build_1.store_coins(v'tradingFee);
    build_1 = build_1.store_int(v'entryFundingFeeGrowthAfter, 128);
    build_1 = build_1.store_int(v'entryRolloverFeeGrowthAfter, 128);
    var build_2 = begin_cell();
    build_2 = build_2.store_coins(v'payout);
    build_2 = build_2.store_coins(v'globalLongMarginAfter);
    build_2 = build_2.store_coins(v'globalShortMarginAfter);
    build_2 = build_2.store_coins(v'globalLongSizeAfter);
    build_2 = build_2.store_coins(v'globalShortSizeAfter);
    build_2 = build_2.store_coins(v'globalLongValueAfter);
    build_2 = build_2.store_coins(v'globalShortValueAfter);
    build_2 = build_2.store_coins(v'lpNetSizeAfter);
    build_2 = build_2.store_int(v'lpIsLong, 1);
    var build_3 = begin_cell();
    build_3 = build_3.store_uint(v'lpEntryPriceAfter, 128);
    build_3 = build_3.store_int(v'lpFundAfter, 128);
    build_3 = build_3.store_coins(v'lpTradingFee);
    build_3 = build_3.store_int(v'lpRealizedPnl, 128);
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $PerpPositionDecreasedEvent$_store_cell((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    return $PerpPositionDecreasedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionDecreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_realizedPnLDelta_tradingFee_fundingFee_rolloverFee_payout_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_globalLongValueAfter_globalShortValueAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl(int $trxId, int $orderId, int $opType, int $positionId, slice $account, int $tokenId, int $isLong, int $marginDelta, int $marginAfter, int $sizeDelta, int $sizeAfter, int $tradePrice, int $entryPrice, int $realizedPnLDelta, int $tradingFee, int $fundingFee, int $rolloverFee, int $payout, int $entryFundingFeeGrowthAfter, int $entryRolloverFeeGrowthAfter, int $globalLongMarginAfter, int $globalShortMarginAfter, int $globalLongSizeAfter, int $globalShortSizeAfter, int $globalLongValueAfter, int $globalShortValueAfter, int $lpNetSizeAfter, int $lpIsLong, int $lpEntryPriceAfter, int $lpFundAfter, int $lpTradingFee, int $lpRealizedPnl) inline {
    return ($trxId, $orderId, $opType, $positionId, $account, $tokenId, $isLong, $marginDelta, $marginAfter, $sizeDelta, $sizeAfter, $tradePrice, $entryPrice, $realizedPnLDelta, $fundingFee, $rolloverFee, $tradingFee, $entryFundingFeeGrowthAfter, $entryRolloverFeeGrowthAfter, $payout, $globalLongMarginAfter, $globalShortMarginAfter, $globalLongSizeAfter, $globalShortSizeAfter, $globalLongValueAfter, $globalShortValueAfter, $lpNetSizeAfter, $lpIsLong, $lpEntryPriceAfter, $lpFundAfter, $lpTradingFee, $lpRealizedPnl);
}

;;
;; Type: CompensateCreatedEvent
;; Header: 0x9628ba96
;; TLB: compensate_created_event#9628ba96 compensateId:uint64 orderType:Maybe uint8 orderId:uint64 trxId:uint64 refundReceiver:Maybe address refundAmount:coins executionFeeReceiver:Maybe address executionFee:coins unlockTime:uint32 = CompensateCreatedEvent
;;

builder $CompensateCreatedEvent$_store(builder build_0, (int, int, int, int, slice, int, slice, int, int) v) inline_ref {
    var (v'compensateId, v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee, v'unlockTime) = v;
    build_0 = store_uint(build_0, 2519251606, 32);
    build_0 = build_0.store_uint(v'compensateId, 64);
    build_0 = ~ null?(v'orderType) ? build_0.store_int(true, 1).store_uint(v'orderType, 8) : build_0.store_int(false, 1);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = __tact_store_address_opt(build_0, v'refundReceiver);
    build_0 = build_0.store_coins(v'refundAmount);
    build_0 = __tact_store_address_opt(build_0, v'executionFeeReceiver);
    build_0 = build_0.store_coins(v'executionFee);
    var build_1 = begin_cell();
    build_1 = build_1.store_uint(v'unlockTime, 32);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $CompensateCreatedEvent$_store_cell((int, int, int, int, slice, int, slice, int, int) v) inline {
    return $CompensateCreatedEvent$_store(begin_cell(), v).end_cell();
}

((int, int, int, int, slice, int, slice, int, int)) $CompensateCreatedEvent$_constructor_compensateId_orderType_orderId_trxId_refundReceiver_refundAmount_executionFeeReceiver_executionFee_unlockTime(int $compensateId, int $orderType, int $orderId, int $trxId, slice $refundReceiver, int $refundAmount, slice $executionFeeReceiver, int $executionFee, int $unlockTime) inline {
    return ($compensateId, $orderType, $orderId, $trxId, $refundReceiver, $refundAmount, $executionFeeReceiver, $executionFee, $unlockTime);
}

;;
;; Type: CompensateCancelledEvent
;; Header: 0x4bc341d5
;; TLB: compensate_cancelled_event#4bc341d5 compensateId:uint64 trxId:uint64 = CompensateCancelledEvent
;;

builder $CompensateCancelledEvent$_store(builder build_0, (int, int) v) inline {
    var (v'compensateId, v'trxId) = v;
    build_0 = store_uint(build_0, 1271087573, 32);
    build_0 = build_0.store_uint(v'compensateId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $CompensateCancelledEvent$_store_cell((int, int) v) inline {
    return $CompensateCancelledEvent$_store(begin_cell(), v).end_cell();
}

((int, int)) $CompensateCancelledEvent$_constructor_compensateId_trxId(int $compensateId, int $trxId) inline {
    return ($compensateId, $trxId);
}

;;
;; Type: CompensateExecutedEvent
;; Header: 0xdb45e438
;; TLB: compensate_executed_event#db45e438 compensateId:uint64 trxId:uint64 = CompensateExecutedEvent
;;

builder $CompensateExecutedEvent$_store(builder build_0, (int, int) v) inline {
    var (v'compensateId, v'trxId) = v;
    build_0 = store_uint(build_0, 3678790712, 32);
    build_0 = build_0.store_uint(v'compensateId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    return build_0;
}

cell $CompensateExecutedEvent$_store_cell((int, int) v) inline {
    return $CompensateExecutedEvent$_store(begin_cell(), v).end_cell();
}

((int, int)) $CompensateExecutedEvent$_constructor_compensateId_trxId(int $compensateId, int $trxId) inline {
    return ($compensateId, $trxId);
}

;;
;; Type: AccountInfo
;; TLB: _ isExecutor:bool isCompensator:bool isClaimer:bool = AccountInfo
;;

(int, int, int) $AccountInfo$_to_external(((int, int, int)) v) inline {
    var (v'isExecutor, v'isCompensator, v'isClaimer) = v; 
    return (v'isExecutor, v'isCompensator, v'isClaimer);
}

((int, int, int)) $AccountInfo$_constructor_isExecutor_isCompensator_isClaimer(int $isExecutor, int $isCompensator, int $isClaimer) inline {
    return ($isExecutor, $isCompensator, $isClaimer);
}

;;
;; Type: ConfigData
;; TLB: _ orderLockTime:uint32 lpMinExecutionFee:coins perpMinExecutionFee:coins gasForLpTrader:coins gasForLpExecutor:coins gasForPerpTrader:coins gasForPerpExecutor:coins minTonsForStorage:coins gasForTransferJetton:coins gasForBurnTlp:coins gasForMintTlp:coins tlpWallet:address jettonWallet:address tlpJetton:address maxLpNetCap:coins = ConfigData
;;

(int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, int) $ConfigData$_to_external(((int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, int)) v) inline {
    var (v'orderLockTime, v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForLpTrader, v'gasForLpExecutor, v'gasForPerpTrader, v'gasForPerpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp, v'tlpWallet, v'jettonWallet, v'tlpJetton, v'maxLpNetCap) = v; 
    return (v'orderLockTime, v'lpMinExecutionFee, v'perpMinExecutionFee, v'gasForLpTrader, v'gasForLpExecutor, v'gasForPerpTrader, v'gasForPerpExecutor, v'minTonsForStorage, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp, v'tlpWallet, v'jettonWallet, v'tlpJetton, v'maxLpNetCap);
}

((int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, int)) $ConfigData$_constructor_orderLockTime_lpMinExecutionFee_perpMinExecutionFee_gasForLpTrader_gasForLpExecutor_gasForPerpTrader_gasForPerpExecutor_minTonsForStorage_gasForTransferJetton_gasForBurnTlp_gasForMintTlp_tlpWallet_jettonWallet_tlpJetton_maxLpNetCap(int $orderLockTime, int $lpMinExecutionFee, int $perpMinExecutionFee, int $gasForLpTrader, int $gasForLpExecutor, int $gasForPerpTrader, int $gasForPerpExecutor, int $minTonsForStorage, int $gasForTransferJetton, int $gasForBurnTlp, int $gasForMintTlp, slice $tlpWallet, slice $jettonWallet, slice $tlpJetton, int $maxLpNetCap) inline {
    return ($orderLockTime, $lpMinExecutionFee, $perpMinExecutionFee, $gasForLpTrader, $gasForLpExecutor, $gasForPerpTrader, $gasForPerpExecutor, $minTonsForStorage, $gasForTransferJetton, $gasForBurnTlp, $gasForMintTlp, $tlpWallet, $jettonWallet, $tlpJetton, $maxLpNetCap);
}

;;
;; Type: PoolStat
;; TLB: _ tlpSupply:coins totalExecutionFee:coins protocolTradingFee:coins globalLPFund:int128 globalLPUnrealizedPnl:int128 globalLpFundingFeeGrowth:coins globalRolloverFeeGrowth:coins = PoolStat
;;

(int, int, int, int, int, int, int) $PoolStat$_to_external(((int, int, int, int, int, int, int)) v) inline {
    var (v'tlpSupply, v'totalExecutionFee, v'protocolTradingFee, v'globalLPFund, v'globalLPUnrealizedPnl, v'globalLpFundingFeeGrowth, v'globalRolloverFeeGrowth) = v; 
    return (v'tlpSupply, v'totalExecutionFee, v'protocolTradingFee, v'globalLPFund, v'globalLPUnrealizedPnl, v'globalLpFundingFeeGrowth, v'globalRolloverFeeGrowth);
}

((int, int, int, int, int, int, int)) $PoolStat$_constructor_tlpSupply_totalExecutionFee_protocolTradingFee_globalLPFund_globalLPUnrealizedPnl_globalLpFundingFeeGrowth_globalRolloverFeeGrowth(int $tlpSupply, int $totalExecutionFee, int $protocolTradingFee, int $globalLPFund, int $globalLPUnrealizedPnl, int $globalLpFundingFeeGrowth, int $globalRolloverFeeGrowth) inline {
    return ($tlpSupply, $totalExecutionFee, $protocolTradingFee, $globalLPFund, $globalLPUnrealizedPnl, $globalLpFundingFeeGrowth, $globalRolloverFeeGrowth);
}

;;
;; Type: AccountPerpPosition
;; TLB: _ positions:dict<address, ^DirectionPerpPosition{longPosition:PerpPosition{positionId:uint64,margin:coins,size:coins,entryPrice:uint128,entryFundingFeeGrowth:int128,entryRolloverFeeGrowth:int128},shortPosition:PerpPosition{positionId:uint64,margin:coins,size:coins,entryPrice:uint128,entryFundingFeeGrowth:int128,entryRolloverFeeGrowth:int128}}> = AccountPerpPosition
;;

builder $AccountPerpPosition$_store(builder build_0, (cell) v) inline {
    var (v'positions) = v;
    build_0 = build_0.store_dict(v'positions);
    return build_0;
}

cell $AccountPerpPosition$_store_cell((cell) v) inline {
    return $AccountPerpPosition$_store(begin_cell(), v).end_cell();
}

(slice, ((cell))) $AccountPerpPosition$_load(slice sc_0) inline {
    var v'positions = sc_0~load_dict();
    return (sc_0, (v'positions));
}

tuple $AccountPerpPosition$_as_optional((cell) v) inline {
    var (v'positions) = v;
    return __tact_tuple_create_1(v'positions);
}

tuple $AccountPerpPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $AccountPerpPosition$_as_optional(sc~$AccountPerpPosition$_load());
}

_ $AccountPerpPosition$_get_positions((cell) v) inline {
    var (v'positions) = v;
    return v'positions;
}

((cell)) $AccountPerpPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'positions) = __tact_tuple_destroy_1(v);
    return (vvv'positions);
}

((cell)) $AccountPerpPosition$_constructor_positions(cell $positions) inline {
    return ($positions);
}

;;
;; Type: PerpPosition
;; TLB: _ positionId:uint64 margin:coins size:coins entryPrice:uint128 entryFundingFeeGrowth:int128 entryRolloverFeeGrowth:int128 = PerpPosition
;;

builder $PerpPosition$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref {
    var (v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth, v'entryRolloverFeeGrowth) = v;
    build_0 = build_0.store_uint(v'positionId, 64);
    build_0 = build_0.store_coins(v'margin);
    build_0 = build_0.store_coins(v'size);
    build_0 = build_0.store_uint(v'entryPrice, 128);
    build_0 = build_0.store_int(v'entryFundingFeeGrowth, 128);
    build_0 = build_0.store_int(v'entryRolloverFeeGrowth, 128);
    return build_0;
}

(slice, ((int, int, int, int, int, int))) $PerpPosition$_load(slice sc_0) inline_ref {
    var v'positionId = sc_0~load_uint(64);
    var v'margin = sc_0~load_coins();
    var v'size = sc_0~load_coins();
    var v'entryPrice = sc_0~load_uint(128);
    var v'entryFundingFeeGrowth = sc_0~load_int(128);
    var v'entryRolloverFeeGrowth = sc_0~load_int(128);
    return (sc_0, (v'positionId, v'margin, v'size, v'entryPrice, v'entryFundingFeeGrowth, v'entryRolloverFeeGrowth));
}

((int, int, int, int, int, int)) $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(int $positionId, int $margin, int $size, int $entryPrice, int $entryFundingFeeGrowth, int $entryRolloverFeeGrowth) inline {
    return ($positionId, $margin, $size, $entryPrice, $entryFundingFeeGrowth, $entryRolloverFeeGrowth);
}

;;
;; Type: DirectionPerpPosition
;; TLB: _ longPosition:PerpPosition{positionId:uint64,margin:coins,size:coins,entryPrice:uint128,entryFundingFeeGrowth:int128,entryRolloverFeeGrowth:int128} shortPosition:PerpPosition{positionId:uint64,margin:coins,size:coins,entryPrice:uint128,entryFundingFeeGrowth:int128,entryRolloverFeeGrowth:int128} = DirectionPerpPosition
;;

builder $DirectionPerpPosition$_store(builder build_0, ((int, int, int, int, int, int), (int, int, int, int, int, int)) v) inline {
    var ((v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth, v'longPosition'entryRolloverFeeGrowth), (v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth, v'shortPosition'entryRolloverFeeGrowth)) = v;
    build_0 = $PerpPosition$_store(build_0, (v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth, v'longPosition'entryRolloverFeeGrowth));
    var build_1 = begin_cell();
    build_1 = $PerpPosition$_store(build_1, (v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth, v'shortPosition'entryRolloverFeeGrowth));
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $DirectionPerpPosition$_store_cell(((int, int, int, int, int, int), (int, int, int, int, int, int)) v) inline {
    return $DirectionPerpPosition$_store(begin_cell(), v).end_cell();
}

(slice, (((int, int, int, int, int, int), (int, int, int, int, int, int)))) $DirectionPerpPosition$_load(slice sc_0) inline {
    var v'longPosition = sc_0~$PerpPosition$_load();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'shortPosition = sc_1~$PerpPosition$_load();
    return (sc_0, (v'longPosition, v'shortPosition));
}

tuple $DirectionPerpPosition$_as_optional(((int, int, int, int, int, int), (int, int, int, int, int, int)) v) inline {
    var ((v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth, v'longPosition'entryRolloverFeeGrowth), (v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth, v'shortPosition'entryRolloverFeeGrowth)) = v;
    return __tact_tuple_create_12(v'longPosition'positionId, v'longPosition'margin, v'longPosition'size, v'longPosition'entryPrice, v'longPosition'entryFundingFeeGrowth, v'longPosition'entryRolloverFeeGrowth, v'shortPosition'positionId, v'shortPosition'margin, v'shortPosition'size, v'shortPosition'entryPrice, v'shortPosition'entryFundingFeeGrowth, v'shortPosition'entryRolloverFeeGrowth);
}

tuple $DirectionPerpPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $DirectionPerpPosition$_as_optional(sc~$DirectionPerpPosition$_load());
}

(((int, int, int, int, int, int), (int, int, int, int, int, int))) $DirectionPerpPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'longPosition'positionId, int vvv'longPosition'margin, int vvv'longPosition'size, int vvv'longPosition'entryPrice, int vvv'longPosition'entryFundingFeeGrowth, int vvv'longPosition'entryRolloverFeeGrowth, int vvv'shortPosition'positionId, int vvv'shortPosition'margin, int vvv'shortPosition'size, int vvv'shortPosition'entryPrice, int vvv'shortPosition'entryFundingFeeGrowth, int vvv'shortPosition'entryRolloverFeeGrowth) = __tact_tuple_destroy_12(v);
    return ((vvv'longPosition'positionId, vvv'longPosition'margin, vvv'longPosition'size, vvv'longPosition'entryPrice, vvv'longPosition'entryFundingFeeGrowth, vvv'longPosition'entryRolloverFeeGrowth), (vvv'shortPosition'positionId, vvv'shortPosition'margin, vvv'shortPosition'size, vvv'shortPosition'entryPrice, vvv'shortPosition'entryFundingFeeGrowth, vvv'shortPosition'entryRolloverFeeGrowth));
}

(((int, int, int, int, int, int), (int, int, int, int, int, int))) $DirectionPerpPosition$_constructor_longPosition_shortPosition((int, int, int, int, int, int) $longPosition, (int, int, int, int, int, int) $shortPosition) inline {
    return ($longPosition, $shortPosition);
}

;;
;; Type: GlobalLPPosition
;; TLB: _ netSize:coins isLong:bool entryPrice:uint128 = GlobalLPPosition
;;

builder $GlobalLPPosition$_store(builder build_0, (int, int, int) v) inline {
    var (v'netSize, v'isLong, v'entryPrice) = v;
    build_0 = build_0.store_coins(v'netSize);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_uint(v'entryPrice, 128);
    return build_0;
}

cell $GlobalLPPosition$_store_cell((int, int, int) v) inline {
    return $GlobalLPPosition$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int))) $GlobalLPPosition$_load(slice sc_0) inline {
    var v'netSize = sc_0~load_coins();
    var v'isLong = sc_0~load_int(1);
    var v'entryPrice = sc_0~load_uint(128);
    return (sc_0, (v'netSize, v'isLong, v'entryPrice));
}

tuple $GlobalLPPosition$_as_optional((int, int, int) v) inline {
    var (v'netSize, v'isLong, v'entryPrice) = v;
    return __tact_tuple_create_3(v'netSize, v'isLong, v'entryPrice);
}

tuple $GlobalLPPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $GlobalLPPosition$_as_optional(sc~$GlobalLPPosition$_load());
}

((int, int, int)) $GlobalLPPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'netSize, int vvv'isLong, int vvv'entryPrice) = __tact_tuple_destroy_3(v);
    return (vvv'netSize, vvv'isLong, vvv'entryPrice);
}

((int, int, int)) $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(int $netSize, int $isLong, int $entryPrice) inline {
    return ($netSize, $isLong, $entryPrice);
}

;;
;; Type: GlobalPosition
;; TLB: _ longMargin:coins shortMargin:coins longSize:coins shortSize:coins longValue:coins shortValue:coins = GlobalPosition
;;

builder $GlobalPosition$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref {
    var (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue) = v;
    build_0 = build_0.store_coins(v'longMargin);
    build_0 = build_0.store_coins(v'shortMargin);
    build_0 = build_0.store_coins(v'longSize);
    build_0 = build_0.store_coins(v'shortSize);
    build_0 = build_0.store_coins(v'longValue);
    build_0 = build_0.store_coins(v'shortValue);
    return build_0;
}

cell $GlobalPosition$_store_cell((int, int, int, int, int, int) v) inline {
    return $GlobalPosition$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int, int, int, int))) $GlobalPosition$_load(slice sc_0) inline_ref {
    var v'longMargin = sc_0~load_coins();
    var v'shortMargin = sc_0~load_coins();
    var v'longSize = sc_0~load_coins();
    var v'shortSize = sc_0~load_coins();
    var v'longValue = sc_0~load_coins();
    var v'shortValue = sc_0~load_coins();
    return (sc_0, (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue));
}

tuple $GlobalPosition$_as_optional((int, int, int, int, int, int) v) inline {
    var (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue) = v;
    return __tact_tuple_create_6(v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue);
}

tuple $GlobalPosition$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $GlobalPosition$_as_optional(sc~$GlobalPosition$_load());
}

_ $GlobalPosition$_get_longSize((int, int, int, int, int, int) v) inline {
    var (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue) = v;
    return v'longSize;
}

_ $GlobalPosition$_get_shortSize((int, int, int, int, int, int) v) inline {
    var (v'longMargin, v'shortMargin, v'longSize, v'shortSize, v'longValue, v'shortValue) = v;
    return v'shortSize;
}

((int, int, int, int, int, int)) $GlobalPosition$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'longMargin, int vvv'shortMargin, int vvv'longSize, int vvv'shortSize, int vvv'longValue, int vvv'shortValue) = __tact_tuple_destroy_6(v);
    return (vvv'longMargin, vvv'shortMargin, vvv'longSize, vvv'shortSize, vvv'longValue, vvv'shortValue);
}

((int, int, int, int, int, int)) $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longValue_shortValue(int $longMargin, int $shortMargin, int $longSize, int $shortSize, int $longValue, int $shortValue) inline {
    return ($longMargin, $shortMargin, $longSize, $shortSize, $longValue, $shortValue);
}

;;
;; Type: PerpPositionData
;; TLB: _ perpPositionIndexNext:uint64 perpPosition:Maybe DirectionPerpPosition{longPosition:PerpPosition{positionId:uint64,margin:coins,size:coins,entryPrice:uint128,entryFundingFeeGrowth:int128,entryRolloverFeeGrowth:int128},shortPosition:PerpPosition{positionId:uint64,margin:coins,size:coins,entryPrice:uint128,entryFundingFeeGrowth:int128,entryRolloverFeeGrowth:int128}} globalLPPosition:Maybe GlobalLPPosition{netSize:coins,isLong:bool,entryPrice:uint128} globalPosition:Maybe GlobalPosition{longMargin:coins,shortMargin:coins,longSize:coins,shortSize:coins,longValue:coins,shortValue:coins} = PerpPositionData
;;

(int, tuple, tuple, tuple) $PerpPositionData$_to_external(((int, tuple, tuple, tuple)) v) inline {
    var (v'perpPositionIndexNext, v'perpPosition, v'globalLPPosition, v'globalPosition) = v; 
    return (v'perpPositionIndexNext, v'perpPosition, v'globalLPPosition, v'globalPosition);
}

((int, tuple, tuple, tuple)) $PerpPositionData$_constructor_perpPositionIndexNext_perpPosition_globalLPPosition_globalPosition(int $perpPositionIndexNext, tuple $perpPosition, tuple $globalLPPosition, tuple $globalPosition) inline {
    return ($perpPositionIndexNext, $perpPosition, $globalLPPosition, $globalPosition);
}

;;
;; Type: LiquidityOrder
;; TLB: _ isIncrease:bool account:address jettonDelta:coins executionFee:coins blockTime:uint32 isPending:bool = LiquidityOrder
;;

builder $LiquidityOrder$_store(builder build_0, (int, slice, int, int, int, int) v) inline_ref {
    var (v'isIncrease, v'account, v'jettonDelta, v'executionFee, v'blockTime, v'isPending) = v;
    build_0 = build_0.store_int(v'isIncrease, 1);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_coins(v'jettonDelta);
    build_0 = build_0.store_coins(v'executionFee);
    build_0 = build_0.store_uint(v'blockTime, 32);
    build_0 = build_0.store_int(v'isPending, 1);
    return build_0;
}

cell $LiquidityOrder$_store_cell((int, slice, int, int, int, int) v) inline {
    return $LiquidityOrder$_store(begin_cell(), v).end_cell();
}

(slice, ((int, slice, int, int, int, int))) $LiquidityOrder$_load(slice sc_0) inline_ref {
    var v'isIncrease = sc_0~load_int(1);
    var v'account = sc_0~__tact_load_address();
    var v'jettonDelta = sc_0~load_coins();
    var v'executionFee = sc_0~load_coins();
    var v'blockTime = sc_0~load_uint(32);
    var v'isPending = sc_0~load_int(1);
    return (sc_0, (v'isIncrease, v'account, v'jettonDelta, v'executionFee, v'blockTime, v'isPending));
}

tuple $LiquidityOrder$_as_optional((int, slice, int, int, int, int) v) inline {
    var (v'isIncrease, v'account, v'jettonDelta, v'executionFee, v'blockTime, v'isPending) = v;
    return __tact_tuple_create_6(v'isIncrease, v'account, v'jettonDelta, v'executionFee, v'blockTime, v'isPending);
}

tuple $LiquidityOrder$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $LiquidityOrder$_as_optional(sc~$LiquidityOrder$_load());
}

((int, slice, int, int, int, int)) $LiquidityOrder$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'isIncrease, slice vvv'account, int vvv'jettonDelta, int vvv'executionFee, int vvv'blockTime, int vvv'isPending) = __tact_tuple_destroy_6(v);
    return (vvv'isIncrease, vvv'account, vvv'jettonDelta, vvv'executionFee, vvv'blockTime, vvv'isPending);
}

((int, slice, int, int, int, int)) $LiquidityOrder$_constructor_isIncrease_account_jettonDelta_executionFee_blockTime_isPending(int $isIncrease, slice $account, int $jettonDelta, int $executionFee, int $blockTime, int $isPending) inline {
    return ($isIncrease, $account, $jettonDelta, $executionFee, $blockTime, $isPending);
}

;;
;; Type: LiquidityOrderData
;; TLB: _ liquidityOrderIndexNext:uint64 liquidityOrder:Maybe LiquidityOrder{isIncrease:bool,account:address,jettonDelta:coins,executionFee:coins,blockTime:uint32,isPending:bool} = LiquidityOrderData
;;

(int, tuple) $LiquidityOrderData$_to_external(((int, tuple)) v) inline {
    var (v'liquidityOrderIndexNext, v'liquidityOrder) = v; 
    return (v'liquidityOrderIndexNext, v'liquidityOrder);
}

((int, tuple)) $LiquidityOrderData$_constructor_liquidityOrderIndexNext_liquidityOrder(int $liquidityOrderIndexNext, tuple $liquidityOrder) inline {
    return ($liquidityOrderIndexNext, $liquidityOrder);
}

;;
;; Type: PerpOrder
;; TLB: _ opType:uint8 tokenId:uint16 account:address isLong:bool marginDelta:coins sizeDelta:coins triggerPrice:uint128 triggerAbove:bool executionFee:coins blockTime:uint32 isPending:bool = PerpOrder
;;

builder $PerpOrder$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int) v) inline_ref {
    var (v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'executionFee, v'blockTime, v'isPending) = v;
    build_0 = build_0.store_uint(v'opType, 8);
    build_0 = build_0.store_uint(v'tokenId, 16);
    build_0 = __tact_store_address(build_0, v'account);
    build_0 = build_0.store_int(v'isLong, 1);
    build_0 = build_0.store_coins(v'marginDelta);
    build_0 = build_0.store_coins(v'sizeDelta);
    build_0 = build_0.store_uint(v'triggerPrice, 128);
    build_0 = build_0.store_int(v'triggerAbove, 1);
    build_0 = build_0.store_coins(v'executionFee);
    build_0 = build_0.store_uint(v'blockTime, 32);
    build_0 = build_0.store_int(v'isPending, 1);
    return build_0;
}

cell $PerpOrder$_store_cell((int, int, slice, int, int, int, int, int, int, int, int) v) inline {
    return $PerpOrder$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, slice, int, int, int, int, int, int, int, int))) $PerpOrder$_load(slice sc_0) inline_ref {
    var v'opType = sc_0~load_uint(8);
    var v'tokenId = sc_0~load_uint(16);
    var v'account = sc_0~__tact_load_address();
    var v'isLong = sc_0~load_int(1);
    var v'marginDelta = sc_0~load_coins();
    var v'sizeDelta = sc_0~load_coins();
    var v'triggerPrice = sc_0~load_uint(128);
    var v'triggerAbove = sc_0~load_int(1);
    var v'executionFee = sc_0~load_coins();
    var v'blockTime = sc_0~load_uint(32);
    var v'isPending = sc_0~load_int(1);
    return (sc_0, (v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'executionFee, v'blockTime, v'isPending));
}

tuple $PerpOrder$_as_optional((int, int, slice, int, int, int, int, int, int, int, int) v) inline {
    var (v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'executionFee, v'blockTime, v'isPending) = v;
    return __tact_tuple_create_11(v'opType, v'tokenId, v'account, v'isLong, v'marginDelta, v'sizeDelta, v'triggerPrice, v'triggerAbove, v'executionFee, v'blockTime, v'isPending);
}

tuple $PerpOrder$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $PerpOrder$_as_optional(sc~$PerpOrder$_load());
}

((int, int, slice, int, int, int, int, int, int, int, int)) $PerpOrder$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'opType, int vvv'tokenId, slice vvv'account, int vvv'isLong, int vvv'marginDelta, int vvv'sizeDelta, int vvv'triggerPrice, int vvv'triggerAbove, int vvv'executionFee, int vvv'blockTime, int vvv'isPending) = __tact_tuple_destroy_11(v);
    return (vvv'opType, vvv'tokenId, vvv'account, vvv'isLong, vvv'marginDelta, vvv'sizeDelta, vvv'triggerPrice, vvv'triggerAbove, vvv'executionFee, vvv'blockTime, vvv'isPending);
}

((int, int, slice, int, int, int, int, int, int, int, int)) $PerpOrder$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_executionFee_blockTime_isPending(int $opType, int $tokenId, slice $account, int $isLong, int $marginDelta, int $sizeDelta, int $triggerPrice, int $triggerAbove, int $executionFee, int $blockTime, int $isPending) inline {
    return ($opType, $tokenId, $account, $isLong, $marginDelta, $sizeDelta, $triggerPrice, $triggerAbove, $executionFee, $blockTime, $isPending);
}

;;
;; Type: PerpOrderEx
;; TLB: _ tpSize:coins tpPrice:uint128 slSize:coins slPrice:uint128 executionFee:coins = PerpOrderEx
;;

builder $PerpOrderEx$_store(builder build_0, (int, int, int, int, int) v) inline {
    var (v'tpSize, v'tpPrice, v'slSize, v'slPrice, v'executionFee) = v;
    build_0 = build_0.store_coins(v'tpSize);
    build_0 = build_0.store_uint(v'tpPrice, 128);
    build_0 = build_0.store_coins(v'slSize);
    build_0 = build_0.store_uint(v'slPrice, 128);
    build_0 = build_0.store_coins(v'executionFee);
    return build_0;
}

cell $PerpOrderEx$_store_cell((int, int, int, int, int) v) inline {
    return $PerpOrderEx$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int, int, int))) $PerpOrderEx$_load(slice sc_0) inline {
    var v'tpSize = sc_0~load_coins();
    var v'tpPrice = sc_0~load_uint(128);
    var v'slSize = sc_0~load_coins();
    var v'slPrice = sc_0~load_uint(128);
    var v'executionFee = sc_0~load_coins();
    return (sc_0, (v'tpSize, v'tpPrice, v'slSize, v'slPrice, v'executionFee));
}

tuple $PerpOrderEx$_as_optional((int, int, int, int, int) v) inline {
    var (v'tpSize, v'tpPrice, v'slSize, v'slPrice, v'executionFee) = v;
    return __tact_tuple_create_5(v'tpSize, v'tpPrice, v'slSize, v'slPrice, v'executionFee);
}

tuple $PerpOrderEx$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $PerpOrderEx$_as_optional(sc~$PerpOrderEx$_load());
}

((int, int, int, int, int)) $PerpOrderEx$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'tpSize, int vvv'tpPrice, int vvv'slSize, int vvv'slPrice, int vvv'executionFee) = __tact_tuple_destroy_5(v);
    return (vvv'tpSize, vvv'tpPrice, vvv'slSize, vvv'slPrice, vvv'executionFee);
}

((int, int, int, int, int)) $PerpOrderEx$_constructor_tpSize_tpPrice_slSize_slPrice_executionFee(int $tpSize, int $tpPrice, int $slSize, int $slPrice, int $executionFee) inline {
    return ($tpSize, $tpPrice, $slSize, $slPrice, $executionFee);
}

;;
;; Type: PerpOrderData
;; TLB: _ perpOrderIndexNext:uint64 perpOrder:Maybe PerpOrder{opType:uint8,tokenId:uint16,account:address,isLong:bool,marginDelta:coins,sizeDelta:coins,triggerPrice:uint128,triggerAbove:bool,executionFee:coins,blockTime:uint32,isPending:bool} perpOrderEx:Maybe PerpOrderEx{tpSize:coins,tpPrice:uint128,slSize:coins,slPrice:uint128,executionFee:coins} = PerpOrderData
;;

(int, tuple, tuple) $PerpOrderData$_to_external(((int, tuple, tuple)) v) inline {
    var (v'perpOrderIndexNext, v'perpOrder, v'perpOrderEx) = v; 
    return (v'perpOrderIndexNext, v'perpOrder, v'perpOrderEx);
}

((int, tuple, tuple)) $PerpOrderData$_constructor_perpOrderIndexNext_perpOrder_perpOrderEx(int $perpOrderIndexNext, tuple $perpOrder, tuple $perpOrderEx) inline {
    return ($perpOrderIndexNext, $perpOrder, $perpOrderEx);
}

;;
;; Type: Compensate
;; TLB: _ orderType:Maybe uint8 orderId:uint64 trxId:uint64 refundReceiver:Maybe address refundAmount:coins executionFeeReceiver:Maybe address executionFee:coins unlockTime:uint32 = Compensate
;;

builder $Compensate$_store(builder build_0, (int, int, int, slice, int, slice, int, int) v) inline_ref {
    var (v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee, v'unlockTime) = v;
    build_0 = ~ null?(v'orderType) ? build_0.store_int(true, 1).store_uint(v'orderType, 8) : build_0.store_int(false, 1);
    build_0 = build_0.store_uint(v'orderId, 64);
    build_0 = build_0.store_uint(v'trxId, 64);
    build_0 = __tact_store_address_opt(build_0, v'refundReceiver);
    build_0 = build_0.store_coins(v'refundAmount);
    build_0 = __tact_store_address_opt(build_0, v'executionFeeReceiver);
    build_0 = build_0.store_coins(v'executionFee);
    build_0 = build_0.store_uint(v'unlockTime, 32);
    return build_0;
}

cell $Compensate$_store_cell((int, int, int, slice, int, slice, int, int) v) inline {
    return $Compensate$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, int, slice, int, slice, int, int))) $Compensate$_load(slice sc_0) inline_ref {
    var v'orderType = sc_0~load_int(1) ? sc_0~load_uint(8) : null();
    var v'orderId = sc_0~load_uint(64);
    var v'trxId = sc_0~load_uint(64);
    var v'refundReceiver = sc_0~__tact_load_address_opt();
    var v'refundAmount = sc_0~load_coins();
    var v'executionFeeReceiver = sc_0~__tact_load_address_opt();
    var v'executionFee = sc_0~load_coins();
    var v'unlockTime = sc_0~load_uint(32);
    return (sc_0, (v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee, v'unlockTime));
}

tuple $Compensate$_as_optional((int, int, int, slice, int, slice, int, int) v) inline {
    var (v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee, v'unlockTime) = v;
    return __tact_tuple_create_8(v'orderType, v'orderId, v'trxId, v'refundReceiver, v'refundAmount, v'executionFeeReceiver, v'executionFee, v'unlockTime);
}

tuple $Compensate$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $Compensate$_as_optional(sc~$Compensate$_load());
}

((int, int, int, slice, int, slice, int, int)) $Compensate$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (int vvv'orderType, int vvv'orderId, int vvv'trxId, slice vvv'refundReceiver, int vvv'refundAmount, slice vvv'executionFeeReceiver, int vvv'executionFee, int vvv'unlockTime) = __tact_tuple_destroy_8(v);
    return (vvv'orderType, vvv'orderId, vvv'trxId, vvv'refundReceiver, vvv'refundAmount, vvv'executionFeeReceiver, vvv'executionFee, vvv'unlockTime);
}

((int, int, int, slice, int, slice, int, int)) $Compensate$_constructor_orderType_orderId_trxId_refundReceiver_refundAmount_executionFeeReceiver_executionFee_unlockTime(int $orderType, int $orderId, int $trxId, slice $refundReceiver, int $refundAmount, slice $executionFeeReceiver, int $executionFee, int $unlockTime) inline {
    return ($orderType, $orderId, $trxId, $refundReceiver, $refundAmount, $executionFeeReceiver, $executionFee, $unlockTime);
}

;;
;; Type: CompensateData
;; TLB: _ compensateIndexNext:uint64 compensate:Maybe Compensate{orderType:Maybe uint8,orderId:uint64,trxId:uint64,refundReceiver:Maybe address,refundAmount:coins,executionFeeReceiver:Maybe address,executionFee:coins,unlockTime:uint32} = CompensateData
;;

(int, tuple) $CompensateData$_to_external(((int, tuple)) v) inline {
    var (v'compensateIndexNext, v'compensate) = v; 
    return (v'compensateIndexNext, v'compensate);
}

((int, tuple)) $CompensateData$_constructor_compensateIndexNext_compensate(int $compensateIndexNext, tuple $compensate) inline {
    return ($compensateIndexNext, $compensate);
}

;;
;; Type: Pool
;;

builder $Pool$_store(builder build_0, (slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'owner, v'stopped, v'orderLockTime, v'maxLpNetCap, v'lpRolloverFeeRate, v'liquidatedPositionShareRate, v'normalPositionShareRate, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp, v'lpMinExecutionFee, v'perpMinExecutionFee, v'minTonsForStorage, v'tlpJetton, v'tlpWallet, v'jettonWallet, v'manager, v'compensator, v'claimer, v'executors, v'tokenConfigs, v'liquidityOrders, v'liquidityOrderIndexNext, v'perpOrders, v'perpOrderExs, v'perpOrderIndexNext, v'compensates, v'compensateIndexNext, v'perpPositionIndexNext, v'perpPositions, v'globalLPPositions, v'globalPositions, v'tlpSupply, v'totalExecutionFee, v'protocolTradingFee, v'globalLPFund, v'globalLPUnrealizedPnl, v'globalLpFundingFeeGrowth, v'globalRolloverFeeGrowth, v'seqno, v'required_sinatures, v'user1_key, v'user2_key, v'user3_key) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'stopped, 1);
    build_0 = build_0.store_uint(v'orderLockTime, 32);
    build_0 = build_0.store_coins(v'maxLpNetCap);
    build_0 = build_0.store_uint(v'lpRolloverFeeRate, 32);
    build_0 = build_0.store_uint(v'liquidatedPositionShareRate, 32);
    build_0 = build_0.store_uint(v'normalPositionShareRate, 32);
    build_0 = build_0.store_coins(v'gasForPerpTrader);
    build_0 = build_0.store_coins(v'gasForPerpExecutor);
    build_0 = build_0.store_coins(v'gasForLpTrader);
    build_0 = build_0.store_coins(v'gasForLpExecutor);
    var build_1 = begin_cell();
    build_1 = build_1.store_coins(v'gasForTransferJetton);
    build_1 = build_1.store_coins(v'gasForBurnTlp);
    build_1 = build_1.store_coins(v'gasForMintTlp);
    build_1 = build_1.store_coins(v'lpMinExecutionFee);
    build_1 = build_1.store_coins(v'perpMinExecutionFee);
    build_1 = build_1.store_coins(v'minTonsForStorage);
    build_1 = __tact_store_address(build_1, v'tlpJetton);
    var build_2 = begin_cell();
    build_2 = __tact_store_address(build_2, v'tlpWallet);
    build_2 = __tact_store_address(build_2, v'jettonWallet);
    build_2 = __tact_store_address(build_2, v'manager);
    var build_3 = begin_cell();
    build_3 = __tact_store_address(build_3, v'compensator);
    build_3 = __tact_store_address(build_3, v'claimer);
    build_3 = build_3.store_dict(v'executors);
    build_3 = build_3.store_dict(v'tokenConfigs);
    build_3 = build_3.store_dict(v'liquidityOrders);
    build_3 = build_3.store_uint(v'liquidityOrderIndexNext, 64);
    var build_4 = begin_cell();
    build_4 = build_4.store_dict(v'perpOrders);
    build_4 = build_4.store_dict(v'perpOrderExs);
    build_4 = build_4.store_uint(v'perpOrderIndexNext, 64);
    build_4 = build_4.store_dict(v'compensates);
    build_4 = build_4.store_uint(v'compensateIndexNext, 64);
    build_4 = build_4.store_uint(v'perpPositionIndexNext, 64);
    var build_5 = begin_cell();
    build_5 = build_5.store_dict(v'perpPositions);
    build_5 = build_5.store_dict(v'globalLPPositions);
    build_5 = build_5.store_dict(v'globalPositions);
    build_5 = build_5.store_coins(v'tlpSupply);
    build_5 = build_5.store_coins(v'totalExecutionFee);
    build_5 = build_5.store_coins(v'protocolTradingFee);
    build_5 = build_5.store_int(v'globalLPFund, 128);
    build_5 = build_5.store_int(v'globalLPUnrealizedPnl, 128);
    build_5 = build_5.store_coins(v'globalLpFundingFeeGrowth);
    build_5 = build_5.store_coins(v'globalRolloverFeeGrowth);
    build_5 = build_5.store_uint(v'seqno, 32);
    build_5 = build_5.store_uint(v'required_sinatures, 4);
    var build_6 = begin_cell();
    build_6 = build_6.store_uint(v'user1_key, 256);
    build_6 = build_6.store_uint(v'user2_key, 256);
    build_6 = build_6.store_uint(v'user3_key, 256);
    build_5 = store_ref(build_5, build_6.end_cell());
    build_4 = store_ref(build_4, build_5.end_cell());
    build_3 = store_ref(build_3, build_4.end_cell());
    build_2 = store_ref(build_2, build_3.end_cell());
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int))) $Pool$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'stopped = sc_0~load_int(1);
    var v'orderLockTime = sc_0~load_uint(32);
    var v'maxLpNetCap = sc_0~load_coins();
    var v'lpRolloverFeeRate = sc_0~load_uint(32);
    var v'liquidatedPositionShareRate = sc_0~load_uint(32);
    var v'normalPositionShareRate = sc_0~load_uint(32);
    var v'gasForPerpTrader = sc_0~load_coins();
    var v'gasForPerpExecutor = sc_0~load_coins();
    var v'gasForLpTrader = sc_0~load_coins();
    var v'gasForLpExecutor = sc_0~load_coins();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'gasForTransferJetton = sc_1~load_coins();
    var v'gasForBurnTlp = sc_1~load_coins();
    var v'gasForMintTlp = sc_1~load_coins();
    var v'lpMinExecutionFee = sc_1~load_coins();
    var v'perpMinExecutionFee = sc_1~load_coins();
    var v'minTonsForStorage = sc_1~load_coins();
    var v'tlpJetton = sc_1~__tact_load_address();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'tlpWallet = sc_2~__tact_load_address();
    var v'jettonWallet = sc_2~__tact_load_address();
    var v'manager = sc_2~__tact_load_address();
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'compensator = sc_3~__tact_load_address();
    var v'claimer = sc_3~__tact_load_address();
    var v'executors = sc_3~load_dict();
    var v'tokenConfigs = sc_3~load_dict();
    var v'liquidityOrders = sc_3~load_dict();
    var v'liquidityOrderIndexNext = sc_3~load_uint(64);
    slice sc_4 = sc_3~load_ref().begin_parse();
    var v'perpOrders = sc_4~load_dict();
    var v'perpOrderExs = sc_4~load_dict();
    var v'perpOrderIndexNext = sc_4~load_uint(64);
    var v'compensates = sc_4~load_dict();
    var v'compensateIndexNext = sc_4~load_uint(64);
    var v'perpPositionIndexNext = sc_4~load_uint(64);
    slice sc_5 = sc_4~load_ref().begin_parse();
    var v'perpPositions = sc_5~load_dict();
    var v'globalLPPositions = sc_5~load_dict();
    var v'globalPositions = sc_5~load_dict();
    var v'tlpSupply = sc_5~load_coins();
    var v'totalExecutionFee = sc_5~load_coins();
    var v'protocolTradingFee = sc_5~load_coins();
    var v'globalLPFund = sc_5~load_int(128);
    var v'globalLPUnrealizedPnl = sc_5~load_int(128);
    var v'globalLpFundingFeeGrowth = sc_5~load_coins();
    var v'globalRolloverFeeGrowth = sc_5~load_coins();
    var v'seqno = sc_5~load_uint(32);
    var v'required_sinatures = sc_5~load_uint(4);
    slice sc_6 = sc_5~load_ref().begin_parse();
    var v'user1_key = sc_6~load_uint(256);
    var v'user2_key = sc_6~load_uint(256);
    var v'user3_key = sc_6~load_uint(256);
    return (sc_0, (v'owner, v'stopped, v'orderLockTime, v'maxLpNetCap, v'lpRolloverFeeRate, v'liquidatedPositionShareRate, v'normalPositionShareRate, v'gasForPerpTrader, v'gasForPerpExecutor, v'gasForLpTrader, v'gasForLpExecutor, v'gasForTransferJetton, v'gasForBurnTlp, v'gasForMintTlp, v'lpMinExecutionFee, v'perpMinExecutionFee, v'minTonsForStorage, v'tlpJetton, v'tlpWallet, v'jettonWallet, v'manager, v'compensator, v'claimer, v'executors, v'tokenConfigs, v'liquidityOrders, v'liquidityOrderIndexNext, v'perpOrders, v'perpOrderExs, v'perpOrderIndexNext, v'compensates, v'compensateIndexNext, v'perpPositionIndexNext, v'perpPositions, v'globalLPPositions, v'globalPositions, v'tlpSupply, v'totalExecutionFee, v'protocolTradingFee, v'globalLPFund, v'globalLPUnrealizedPnl, v'globalLpFundingFeeGrowth, v'globalRolloverFeeGrowth, v'seqno, v'required_sinatures, v'user1_key, v'user2_key, v'user3_key));
}

(slice, ((int, int, int, int, int))) $Pool$init$_load(slice sc_0) inline {
    var v'deployId = sc_0~load_int(257);
    var v'user1_key = sc_0~load_int(257);
    var v'user2_key = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'user3_key = sc_1~load_int(257);
    var v'required_sinatures = sc_1~load_int(257);
    return (sc_0, (v'deployId, v'user1_key, v'user2_key, v'user3_key, v'required_sinatures));
}

(slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int) $Pool$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Pool$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (int $deployId, int $user1_key, int $user2_key, int $user3_key, int $required_sinatures) = $sc~$Pool$init$_load();
        $sc.end_parse();
        return $Pool$_contract_init($deployId, $user1_key, $user2_key, $user3_key, $required_sinatures);
    }
}

() $Pool$_contract_store((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Pool$_store(b, v);
    set_data(b.end_cell());
}