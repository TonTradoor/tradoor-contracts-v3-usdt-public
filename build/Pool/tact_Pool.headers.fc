;;
;; Header files for Pool
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_min_uint_uint
(int, int, int) __tact_dict_min_uint_uint(cell d, int kl, int vl) inline;

;; __tact_dict_next_uint_uint
(int, int, int) __tact_dict_next_uint_uint(cell d, int kl, int pivot, int vl) inline;

;; __tact_dict_set_uint_cell
(cell, ()) __tact_dict_set_uint_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_uint_cell
cell __tact_dict_get_uint_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_min_slice_int
(slice, int, int) __tact_dict_min_slice_int(cell d, int kl, int vl) inline;

;; __tact_dict_next_slice_int
(slice, int, int) __tact_dict_next_slice_int(cell d, int kl, slice pivot, int vl) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_int_eq_nullable_one
int __tact_int_eq_nullable_one(int a, int b) inline;

;; __tact_dict_exists_slice
int __tact_dict_exists_slice(cell d, int kl, slice k) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $UpdateContract$_load
(slice, ((slice, slice))) $UpdateContract$_load(slice sc_0) inline;

;; $JettonTransfer$_store
builder $JettonTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref;

;; $JettonTransfer$_store_cell
cell $JettonTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline;

;; $JettonTransferNotification$_load
(slice, ((int, int, slice, slice))) $JettonTransferNotification$_load(slice sc_0) inline;

;; $JettonBurn$_store
builder $JettonBurn$_store(builder build_0, (int, int, slice, cell) v) inline;

;; $JettonBurn$_store_cell
cell $JettonBurn$_store_cell((int, int, slice, cell) v) inline;

;; $JettonMint$_store
builder $JettonMint$_store(builder build_0, (slice, slice, int, cell, int, slice) v) inline_ref;

;; $JettonMint$_store_cell
cell $JettonMint$_store_cell((slice, slice, int, cell, int, slice) v) inline;

;; $JettonUpdateContent$_store
builder $JettonUpdateContent$_store(builder build_0, (cell) v) inline;

;; $JettonUpdateContent$_store_cell
cell $JettonUpdateContent$_store_cell((cell) v) inline;

;; $JettonUpdateContent$_load
(slice, ((cell))) $JettonUpdateContent$_load(slice sc_0) inline;

;; $GasConfig$_load
(slice, ((int, int, int, int, int, int, int, int, int, int))) $GasConfig$_load(slice sc_0) inline_ref;

;; $ExecutorConfig$_load
(slice, ((cell, slice, slice))) $ExecutorConfig$_load(slice sc_0) inline;

;; $ContractConfig$_load
(slice, ((slice, slice, slice))) $ContractConfig$_load(slice sc_0) inline;

;; $GasConfig$_as_optional
tuple $GasConfig$_as_optional((int, int, int, int, int, int, int, int, int, int) v) inline;

;; $ExecutorConfig$_as_optional
tuple $ExecutorConfig$_as_optional((cell, slice, slice) v) inline;

;; $ContractConfig$_as_optional
tuple $ContractConfig$_as_optional((slice, slice, slice) v) inline;

;; $UpdateConfig$_load
(slice, ((int, int, int, tuple, tuple, tuple))) $UpdateConfig$_load(slice sc_0) inline_ref;

;; $TokenConfig$_store
builder $TokenConfig$_store(builder build_0, (slice, int, int, int, int, int, int) v) inline_ref;

;; $TokenConfig$_store_cell
cell $TokenConfig$_store_cell((slice, int, int, int, int, int, int) v) inline;

;; $TokenConfig$_load
(slice, ((slice, int, int, int, int, int, int))) $TokenConfig$_load(slice sc_0) inline_ref;

;; $TokenConfig$_as_optional
tuple $TokenConfig$_as_optional((slice, int, int, int, int, int, int) v) inline;

;; $TokenConfig$_load_opt
tuple $TokenConfig$_load_opt(cell cl) inline;

;; $ListToken$_load
(slice, ((int, (slice, int, int, int, int, int, int)))) $ListToken$_load(slice sc_0) inline;

;; $DelistToken$_load
(slice, ((int))) $DelistToken$_load(slice sc_0) inline;

;; $ClaimProtocolFee$_load
(slice, ((int, slice))) $ClaimProtocolFee$_load(slice sc_0) inline;

;; $CancelLiquidityOrder$_load
(slice, ((int, int, slice))) $CancelLiquidityOrder$_load(slice sc_0) inline;

;; $ExecuteLiquidityOrder$_load
(slice, ((int, int, slice, cell, int, int))) $ExecuteLiquidityOrder$_load(slice sc_0) inline_ref;

;; $CreateDecreasePerpOrder$_load
(slice, ((int, int, int, int, int, int, int, int))) $CreateDecreasePerpOrder$_load(slice sc_0) inline_ref;

;; $CreateTpSlPerpOrder$_load
(slice, ((int, int, int, int, int, int, int, int, int))) $CreateTpSlPerpOrder$_load(slice sc_0) inline_ref;

;; $CancelPerpOrder$_load
(slice, ((slice, int, int))) $CancelPerpOrder$_load(slice sc_0) inline;

;; $ExecutePerpOrder$_load
(slice, ((slice, int, int, int, int, int, int, int))) $ExecutePerpOrder$_load(slice sc_0) inline_ref;

;; $LiquidatePerpPosition$_load
(slice, ((slice, int, slice, int, int, int, int, int, int))) $LiquidatePerpPosition$_load(slice sc_0) inline_ref;

;; $ADLPerpPosition$_load
(slice, ((int, slice, int, int, int, int, int, int, int, int))) $ADLPerpPosition$_load(slice sc_0) inline_ref;

;; $CreateCompensate$_load
(slice, ((int, int, int, slice, int, slice, int))) $CreateCompensate$_load(slice sc_0) inline_ref;

;; $ExecuteOrCancelCompensate$_load
(slice, ((int, int, int))) $ExecuteOrCancelCompensate$_load(slice sc_0) inline;

;; $LiquidityOrderCreatedEvent$_store
builder $LiquidityOrderCreatedEvent$_store(builder build_0, (int, slice, int, int, int, int) v) inline_ref;

;; $LiquidityOrderCreatedEvent$_store_cell
cell $LiquidityOrderCreatedEvent$_store_cell((int, slice, int, int, int, int) v) inline;

;; $LiquidityOrderCancelledEvent$_store
builder $LiquidityOrderCancelledEvent$_store(builder build_0, (int, int, int) v) inline;

;; $LiquidityOrderCancelledEvent$_store_cell
cell $LiquidityOrderCancelledEvent$_store_cell((int, int, int) v) inline;

;; $LiquidityPoolChangedEvent$_store
builder $LiquidityPoolChangedEvent$_store(builder build_0, (int, int, int, slice, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $LiquidityPoolChangedEvent$_store_cell
cell $LiquidityPoolChangedEvent$_store_cell((int, int, int, slice, int, int, int, int, int, int, int, int, int) v) inline;

;; $PerpOrderCreatedEvent$_store
builder $PerpOrderCreatedEvent$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $PerpOrderCreatedEvent$_store_cell
cell $PerpOrderCreatedEvent$_store_cell((int, int, slice, int, int, int, int, int, int, int, int, int) v) inline;

;; $PerpOrderCancelledEvent$_store
builder $PerpOrderCancelledEvent$_store(builder build_0, (int, int, int) v) inline;

;; $PerpOrderCancelledEvent$_store_cell
cell $PerpOrderCancelledEvent$_store_cell((int, int, int) v) inline;

;; $PerpPositionIncreasedEvent$_store
builder $PerpPositionIncreasedEvent$_store(builder build_0, (int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $PerpPositionIncreasedEvent$_store_cell
cell $PerpPositionIncreasedEvent$_store_cell((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $PerpPositionDecreasedEvent$_store
builder $PerpPositionDecreasedEvent$_store(builder build_0, (int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline_ref;

;; $PerpPositionDecreasedEvent$_store_cell
cell $PerpPositionDecreasedEvent$_store_cell((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $CompensateCreatedEvent$_store
builder $CompensateCreatedEvent$_store(builder build_0, (int, int, int, int, slice, int, slice, int, int) v) inline_ref;

;; $CompensateCreatedEvent$_store_cell
cell $CompensateCreatedEvent$_store_cell((int, int, int, int, slice, int, slice, int, int) v) inline;

;; $CompensateCancelledEvent$_store
builder $CompensateCancelledEvent$_store(builder build_0, (int, int) v) inline;

;; $CompensateCancelledEvent$_store_cell
cell $CompensateCancelledEvent$_store_cell((int, int) v) inline;

;; $CompensateExecutedEvent$_store
builder $CompensateExecutedEvent$_store(builder build_0, (int, int) v) inline;

;; $CompensateExecutedEvent$_store_cell
cell $CompensateExecutedEvent$_store_cell((int, int) v) inline;

;; $AccountPerpPosition$_store
builder $AccountPerpPosition$_store(builder build_0, (cell) v) inline;

;; $AccountPerpPosition$_store_cell
cell $AccountPerpPosition$_store_cell((cell) v) inline;

;; $AccountPerpPosition$_load
(slice, ((cell))) $AccountPerpPosition$_load(slice sc_0) inline;

;; $AccountPerpPosition$_as_optional
tuple $AccountPerpPosition$_as_optional((cell) v) inline;

;; $AccountPerpPosition$_load_opt
tuple $AccountPerpPosition$_load_opt(cell cl) inline;

;; $PerpPosition$_store
builder $PerpPosition$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref;

;; $PerpPosition$_load
(slice, ((int, int, int, int, int, int))) $PerpPosition$_load(slice sc_0) inline_ref;

;; $DirectionPerpPosition$_store
builder $DirectionPerpPosition$_store(builder build_0, ((int, int, int, int, int, int), (int, int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_store_cell
cell $DirectionPerpPosition$_store_cell(((int, int, int, int, int, int), (int, int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_load
(slice, (((int, int, int, int, int, int), (int, int, int, int, int, int)))) $DirectionPerpPosition$_load(slice sc_0) inline;

;; $DirectionPerpPosition$_as_optional
tuple $DirectionPerpPosition$_as_optional(((int, int, int, int, int, int), (int, int, int, int, int, int)) v) inline;

;; $DirectionPerpPosition$_load_opt
tuple $DirectionPerpPosition$_load_opt(cell cl) inline;

;; $GlobalLPPosition$_store
builder $GlobalLPPosition$_store(builder build_0, (int, int, int) v) inline;

;; $GlobalLPPosition$_store_cell
cell $GlobalLPPosition$_store_cell((int, int, int) v) inline;

;; $GlobalLPPosition$_load
(slice, ((int, int, int))) $GlobalLPPosition$_load(slice sc_0) inline;

;; $GlobalLPPosition$_as_optional
tuple $GlobalLPPosition$_as_optional((int, int, int) v) inline;

;; $GlobalLPPosition$_load_opt
tuple $GlobalLPPosition$_load_opt(cell cl) inline;

;; $GlobalPosition$_store
builder $GlobalPosition$_store(builder build_0, (int, int, int, int, int, int) v) inline_ref;

;; $GlobalPosition$_store_cell
cell $GlobalPosition$_store_cell((int, int, int, int, int, int) v) inline;

;; $GlobalPosition$_load
(slice, ((int, int, int, int, int, int))) $GlobalPosition$_load(slice sc_0) inline_ref;

;; $GlobalPosition$_as_optional
tuple $GlobalPosition$_as_optional((int, int, int, int, int, int) v) inline;

;; $GlobalPosition$_load_opt
tuple $GlobalPosition$_load_opt(cell cl) inline;

;; $LiquidityOrder$_store
builder $LiquidityOrder$_store(builder build_0, (int, slice, int, int, int, int) v) inline_ref;

;; $LiquidityOrder$_store_cell
cell $LiquidityOrder$_store_cell((int, slice, int, int, int, int) v) inline;

;; $LiquidityOrder$_load
(slice, ((int, slice, int, int, int, int))) $LiquidityOrder$_load(slice sc_0) inline_ref;

;; $LiquidityOrder$_as_optional
tuple $LiquidityOrder$_as_optional((int, slice, int, int, int, int) v) inline;

;; $LiquidityOrder$_load_opt
tuple $LiquidityOrder$_load_opt(cell cl) inline;

;; $PerpOrder$_store
builder $PerpOrder$_store(builder build_0, (int, int, slice, int, int, int, int, int, int, int, int) v) inline_ref;

;; $PerpOrder$_store_cell
cell $PerpOrder$_store_cell((int, int, slice, int, int, int, int, int, int, int, int) v) inline;

;; $PerpOrder$_load
(slice, ((int, int, slice, int, int, int, int, int, int, int, int))) $PerpOrder$_load(slice sc_0) inline_ref;

;; $PerpOrder$_as_optional
tuple $PerpOrder$_as_optional((int, int, slice, int, int, int, int, int, int, int, int) v) inline;

;; $PerpOrder$_load_opt
tuple $PerpOrder$_load_opt(cell cl) inline;

;; $PerpOrderEx$_store
builder $PerpOrderEx$_store(builder build_0, (int, int, int, int, int) v) inline;

;; $PerpOrderEx$_store_cell
cell $PerpOrderEx$_store_cell((int, int, int, int, int) v) inline;

;; $PerpOrderEx$_load
(slice, ((int, int, int, int, int))) $PerpOrderEx$_load(slice sc_0) inline;

;; $PerpOrderEx$_as_optional
tuple $PerpOrderEx$_as_optional((int, int, int, int, int) v) inline;

;; $PerpOrderEx$_load_opt
tuple $PerpOrderEx$_load_opt(cell cl) inline;

;; $Compensate$_store
builder $Compensate$_store(builder build_0, (int, int, int, slice, int, slice, int, int) v) inline_ref;

;; $Compensate$_store_cell
cell $Compensate$_store_cell((int, int, int, slice, int, slice, int, int) v) inline;

;; $Compensate$_load
(slice, ((int, int, int, slice, int, slice, int, int))) $Compensate$_load(slice sc_0) inline_ref;

;; $Compensate$_as_optional
tuple $Compensate$_as_optional((int, int, int, slice, int, slice, int, int) v) inline;

;; $Compensate$_load_opt
tuple $Compensate$_load_opt(cell cl) inline;

;; $Pool$_store
builder $Pool$_store(builder build_0, (slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) v) inline;

;; $Pool$_load
(slice, ((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int))) $Pool$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $AccountInfo$_to_external
(int, int, int) $AccountInfo$_to_external(((int, int, int)) v) inline;

;; $ConfigData$_to_external
(int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, int) $ConfigData$_to_external(((int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, int)) v) inline;

;; $TokenConfig$_not_null
((slice, int, int, int, int, int, int)) $TokenConfig$_not_null(tuple v) inline;

;; $TokenConfig$_to_tuple
tuple $TokenConfig$_to_tuple(((slice, int, int, int, int, int, int)) v) inline;

;; $TokenConfig$_to_opt_tuple
tuple $TokenConfig$_to_opt_tuple(tuple v) inline;

;; $TokenConfig$_to_opt_external
tuple $TokenConfig$_to_opt_external(tuple v) inline;

;; $PoolStat$_to_external
(int, int, int, int, int, int, int) $PoolStat$_to_external(((int, int, int, int, int, int, int)) v) inline;

;; $AccountPerpPosition$_get_positions
_ $AccountPerpPosition$_get_positions((cell) v) inline;

;; $AccountPerpPosition$_not_null
((cell)) $AccountPerpPosition$_not_null(tuple v) inline;

;; $DirectionPerpPosition$_not_null
(((int, int, int, int, int, int), (int, int, int, int, int, int))) $DirectionPerpPosition$_not_null(tuple v) inline;

;; $GlobalLPPosition$_not_null
((int, int, int)) $GlobalLPPosition$_not_null(tuple v) inline;

;; $PerpPositionData$_to_external
(int, tuple, tuple, tuple) $PerpPositionData$_to_external(((int, tuple, tuple, tuple)) v) inline;

;; $GlobalPosition$_get_longSize
_ $GlobalPosition$_get_longSize((int, int, int, int, int, int) v) inline;

;; $GlobalPosition$_get_shortSize
_ $GlobalPosition$_get_shortSize((int, int, int, int, int, int) v) inline;

;; $GlobalPosition$_not_null
((int, int, int, int, int, int)) $GlobalPosition$_not_null(tuple v) inline;

;; $GasConfig$_get_lpMinExecutionFee
_ $GasConfig$_get_lpMinExecutionFee((int, int, int, int, int, int, int, int, int, int) v) inline;

;; $GasConfig$_get_perpMinExecutionFee
_ $GasConfig$_get_perpMinExecutionFee((int, int, int, int, int, int, int, int, int, int) v) inline;

;; $GasConfig$_get_gasForPerpTrader
_ $GasConfig$_get_gasForPerpTrader((int, int, int, int, int, int, int, int, int, int) v) inline;

;; $GasConfig$_get_gasForPerpExecutor
_ $GasConfig$_get_gasForPerpExecutor((int, int, int, int, int, int, int, int, int, int) v) inline;

;; $GasConfig$_get_gasForLpTrader
_ $GasConfig$_get_gasForLpTrader((int, int, int, int, int, int, int, int, int, int) v) inline;

;; $GasConfig$_get_gasForLpExecutor
_ $GasConfig$_get_gasForLpExecutor((int, int, int, int, int, int, int, int, int, int) v) inline;

;; $GasConfig$_get_minTonsForStorage
_ $GasConfig$_get_minTonsForStorage((int, int, int, int, int, int, int, int, int, int) v) inline;

;; $GasConfig$_get_gasForTransferJetton
_ $GasConfig$_get_gasForTransferJetton((int, int, int, int, int, int, int, int, int, int) v) inline;

;; $GasConfig$_get_gasForBurnTlp
_ $GasConfig$_get_gasForBurnTlp((int, int, int, int, int, int, int, int, int, int) v) inline;

;; $GasConfig$_get_gasForMintTlp
_ $GasConfig$_get_gasForMintTlp((int, int, int, int, int, int, int, int, int, int) v) inline;

;; $GasConfig$_not_null
((int, int, int, int, int, int, int, int, int, int)) $GasConfig$_not_null(tuple v) inline;

;; $ExecutorConfig$_get_executors
_ $ExecutorConfig$_get_executors((cell, slice, slice) v) inline;

;; $ExecutorConfig$_get_compensator
_ $ExecutorConfig$_get_compensator((cell, slice, slice) v) inline;

;; $ExecutorConfig$_get_claimer
_ $ExecutorConfig$_get_claimer((cell, slice, slice) v) inline;

;; $ExecutorConfig$_not_null
((cell, slice, slice)) $ExecutorConfig$_not_null(tuple v) inline;

;; $ContractConfig$_get_tlpJetton
_ $ContractConfig$_get_tlpJetton((slice, slice, slice) v) inline;

;; $ContractConfig$_get_tlpWallet
_ $ContractConfig$_get_tlpWallet((slice, slice, slice) v) inline;

;; $ContractConfig$_get_jettonWallet
_ $ContractConfig$_get_jettonWallet((slice, slice, slice) v) inline;

;; $ContractConfig$_not_null
((slice, slice, slice)) $ContractConfig$_not_null(tuple v) inline;

;; $LiquidityOrder$_not_null
((int, slice, int, int, int, int)) $LiquidityOrder$_not_null(tuple v) inline;

;; $LiquidityOrderData$_to_external
(int, tuple) $LiquidityOrderData$_to_external(((int, tuple)) v) inline;

;; $PerpOrder$_not_null
((int, int, slice, int, int, int, int, int, int, int, int)) $PerpOrder$_not_null(tuple v) inline;

;; $PerpOrderEx$_not_null
((int, int, int, int, int)) $PerpOrderEx$_not_null(tuple v) inline;

;; $PerpOrderData$_to_external
(int, tuple, tuple) $PerpOrderData$_to_external(((int, tuple, tuple)) v) inline;

;; $Compensate$_not_null
((int, int, int, slice, int, slice, int, int)) $Compensate$_not_null(tuple v) inline;

;; $CompensateData$_to_external
(int, tuple) $CompensateData$_to_external(((int, tuple)) v) inline;

;; $Pool$init$_load
(slice, ((int))) $Pool$init$_load(slice sc_0) inline;

;; $Pool$_contract_init
(slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $Pool$_contract_init(int $deployId) impure inline_ref;

;; $Pool$_contract_load
(slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $Pool$_contract_load() impure inline_ref;

;; $Pool$_contract_store
() $Pool$_contract_store((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) v) impure inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $global_emptySlice
slice $global_emptySlice() impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline;

;; $JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload
((int, int, slice, slice, cell, int, slice)) $JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int $query_id, int $amount, slice $destination, slice $response_destination, cell $custom_payload, int $forward_ton_amount, slice $forward_payload) inline;

;; $Pool$_fun_refundJetton
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_refundJetton((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $query_id, int $amount, slice $destination, slice $response_destination) impure inline_ref;

;; $Pool$_fun_transferJetton
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_transferJetton((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, slice $to, int $query_id, int $amount, slice $destination, slice $response_destination) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline;

;; $Pool$_fun_transferEstimatedRemainValue
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_transferEstimatedRemainValue((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $gasConsumption, slice $to, int $executionFeeDelta) impure inline_ref;

;; $LiquidityOrder$_constructor_isIncrease_account_jettonDelta_executionFee_blockTime_isPending
((int, slice, int, int, int, int)) $LiquidityOrder$_constructor_isIncrease_account_jettonDelta_executionFee_blockTime_isPending(int $isIncrease, slice $account, int $jettonDelta, int $executionFee, int $blockTime, int $isPending) inline;

;; $LiquidityOrderCreatedEvent$_constructor_opType_account_jettonDelta_executionFee_orderId_trxId
((int, slice, int, int, int, int)) $LiquidityOrderCreatedEvent$_constructor_opType_account_jettonDelta_executionFee_orderId_trxId(int $opType, slice $account, int $jettonDelta, int $executionFee, int $orderId, int $trxId) inline;

;; $Pool$_fun_createLiquidityOrder
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_createLiquidityOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $query_id, int $isIncrease, slice $account, int $executionFee, int $jettonDelta) impure inline_ref;

;; $PerpOrderEx$_constructor_tpSize_tpPrice_slSize_slPrice_executionFee
((int, int, int, int, int)) $PerpOrderEx$_constructor_tpSize_tpPrice_slSize_slPrice_executionFee(int $tpSize, int $tpPrice, int $slSize, int $slPrice, int $executionFee) inline;

;; $PerpOrder$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_executionFee_blockTime_isPending
((int, int, slice, int, int, int, int, int, int, int, int)) $PerpOrder$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_executionFee_blockTime_isPending(int $opType, int $tokenId, slice $account, int $isLong, int $marginDelta, int $sizeDelta, int $triggerPrice, int $triggerAbove, int $executionFee, int $blockTime, int $isPending) inline;

;; $PerpOrderCreatedEvent$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_executionFee_orderId_triggerPrice_triggerAbove_requestTime_trxId
((int, int, slice, int, int, int, int, int, int, int, int, int)) $PerpOrderCreatedEvent$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_executionFee_orderId_triggerPrice_triggerAbove_requestTime_trxId(int $opType, int $tokenId, slice $account, int $isLong, int $marginDelta, int $sizeDelta, int $executionFee, int $orderId, int $triggerPrice, int $triggerAbove, int $requestTime, int $trxId) inline;

;; $Pool$_fun_createPerpOrder
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), int) $Pool$_fun_createPerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $trxId, int $opType, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $triggerPrice, int $executionFee, int $requestTime) impure inline_ref;

;; $Pool$_fun_createIncreasePerpOrder
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_createIncreasePerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $query_id, slice $account, int $executionFee, int $isMarket, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $triggerPrice, int $tpSize, int $tpPrice, int $slSize, int $slPrice, int $requestTime) impure inline_ref;

;; $AccountPerpPosition$_constructor_positions
((cell)) $AccountPerpPosition$_constructor_positions(cell $positions) inline;

;; $DirectionPerpPosition$_constructor_longPosition_shortPosition
(((int, int, int, int, int, int), (int, int, int, int, int, int))) $DirectionPerpPosition$_constructor_longPosition_shortPosition((int, int, int, int, int, int) $longPosition, (int, int, int, int, int, int) $shortPosition) inline;

;; $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth
((int, int, int, int, int, int)) $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(int $positionId, int $margin, int $size, int $entryPrice, int $entryFundingFeeGrowth, int $entryRolloverFeeGrowth) inline;

;; $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longValue_shortValue
((int, int, int, int, int, int)) $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longValue_shortValue(int $longMargin, int $shortMargin, int $longSize, int $shortSize, int $longValue, int $shortValue) inline;

;; $GlobalLPPosition$_constructor_netSize_isLong_entryPrice
((int, int, int)) $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(int $netSize, int $isLong, int $entryPrice) inline;

;; $PerpPositionIncreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_rolloverFee_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_globalLongValueAfter_globalShortValueAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl
((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionIncreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_rolloverFee_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_globalLongValueAfter_globalShortValueAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl(int $trxId, int $orderId, int $opType, int $positionId, slice $account, int $tokenId, int $isLong, int $marginDelta, int $marginAfter, int $sizeDelta, int $sizeAfter, int $tradePrice, int $entryPrice, int $tradingFee, int $fundingFee, int $rolloverFee, int $entryFundingFeeGrowthAfter, int $entryRolloverFeeGrowthAfter, int $globalLongMarginAfter, int $globalShortMarginAfter, int $globalLongSizeAfter, int $globalShortSizeAfter, int $globalLongValueAfter, int $globalShortValueAfter, int $lpNetSizeAfter, int $lpIsLong, int $lpEntryPriceAfter, int $lpFundAfter, int $lpTradingFee, int $lpRealizedPnl) inline;

;; $Pool$_fun_increasePerpPosition
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_increasePerpPosition((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $trxId, int $orderId, int $opType, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice, int $fundingFeeGrowth, int $rolloverFeeGrowth, slice $executionFeeReceiver) impure inline_ref;

;; $PerpPositionDecreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_realizedPnLDelta_tradingFee_fundingFee_rolloverFee_payout_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_globalLongValueAfter_globalShortValueAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl
((int, int, int, int, slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int)) $PerpPositionDecreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_realizedPnLDelta_tradingFee_fundingFee_rolloverFee_payout_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_globalLongValueAfter_globalShortValueAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl(int $trxId, int $orderId, int $opType, int $positionId, slice $account, int $tokenId, int $isLong, int $marginDelta, int $marginAfter, int $sizeDelta, int $sizeAfter, int $tradePrice, int $entryPrice, int $realizedPnLDelta, int $tradingFee, int $fundingFee, int $rolloverFee, int $payout, int $entryFundingFeeGrowthAfter, int $entryRolloverFeeGrowthAfter, int $globalLongMarginAfter, int $globalShortMarginAfter, int $globalLongSizeAfter, int $globalShortSizeAfter, int $globalLongValueAfter, int $globalShortValueAfter, int $lpNetSizeAfter, int $lpIsLong, int $lpEntryPriceAfter, int $lpFundAfter, int $lpTradingFee, int $lpRealizedPnl) inline;

;; $Pool$_fun_decreasePerpPosition
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_decreasePerpPosition((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $trxId, int $orderId, int $opType, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice, int $fundingFeeGrowth, int $rolloverFeeGrowth, slice $executionFeeReceiver) impure inline_ref;

;; $Pool$_fun_liquidatePerpPosition
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_liquidatePerpPosition((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $trxId, int $orderId, slice $account, int $tokenId, int $isLong, int $tradePrice, int $fundingFeeGrowth, int $rolloverFeeGrowth, slice $liquidationFeeReceiver) impure inline_ref;

;; $AccountInfo$_constructor_isExecutor_isCompensator_isClaimer
((int, int, int)) $AccountInfo$_constructor_isExecutor_isCompensator_isClaimer(int $isExecutor, int $isCompensator, int $isClaimer) inline;

;; $Pool$_fun_accountInfo
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, int, int)) $Pool$_fun_accountInfo((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, slice $account) impure inline_ref;

;; $PerpPositionData$_constructor_perpPositionIndexNext_perpPosition_globalLPPosition_globalPosition
((int, tuple, tuple, tuple)) $PerpPositionData$_constructor_perpPositionIndexNext_perpPosition_globalLPPosition_globalPosition(int $perpPositionIndexNext, tuple $perpPosition, tuple $globalLPPosition, tuple $globalPosition) inline;

;; $Pool$_fun_perpPosition
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, tuple, tuple, tuple)) $Pool$_fun_perpPosition((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $tokenId, slice $account) impure inline_ref;

;; $ConfigData$_constructor_orderLockTime_lpMinExecutionFee_perpMinExecutionFee_gasForLpTrader_gasForLpExecutor_gasForPerpTrader_gasForPerpExecutor_minTonsForStorage_gasForTransferJetton_gasForBurnTlp_gasForMintTlp_tlpWallet_jettonWallet_tlpJetton_maxLpNetCap
((int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, int)) $ConfigData$_constructor_orderLockTime_lpMinExecutionFee_perpMinExecutionFee_gasForLpTrader_gasForLpExecutor_gasForPerpTrader_gasForPerpExecutor_minTonsForStorage_gasForTransferJetton_gasForBurnTlp_gasForMintTlp_tlpWallet_jettonWallet_tlpJetton_maxLpNetCap(int $orderLockTime, int $lpMinExecutionFee, int $perpMinExecutionFee, int $gasForLpTrader, int $gasForLpExecutor, int $gasForPerpTrader, int $gasForPerpExecutor, int $minTonsForStorage, int $gasForTransferJetton, int $gasForBurnTlp, int $gasForMintTlp, slice $tlpWallet, slice $jettonWallet, slice $tlpJetton, int $maxLpNetCap) inline;

;; $Pool$_fun_configData
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, int)) $Pool$_fun_configData((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $Pool$_fun_tokenConfig
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), tuple) $Pool$_fun_tokenConfig((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $tokenId) impure inline_ref;

;; $PoolStat$_constructor_tlpSupply_totalExecutionFee_protocolTradingFee_globalLPFund_globalLPUnrealizedPnl_globalLpFundingFeeGrowth_globalRolloverFeeGrowth
((int, int, int, int, int, int, int)) $PoolStat$_constructor_tlpSupply_totalExecutionFee_protocolTradingFee_globalLPFund_globalLPUnrealizedPnl_globalLpFundingFeeGrowth_globalRolloverFeeGrowth(int $tlpSupply, int $totalExecutionFee, int $protocolTradingFee, int $globalLPFund, int $globalLPUnrealizedPnl, int $globalLpFundingFeeGrowth, int $globalRolloverFeeGrowth) inline;

;; $Pool$_fun_poolStat
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, int, int, int, int, int, int)) $Pool$_fun_poolStat((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LiquidityOrderData$_constructor_liquidityOrderIndexNext_liquidityOrder
((int, tuple)) $LiquidityOrderData$_constructor_liquidityOrderIndexNext_liquidityOrder(int $liquidityOrderIndexNext, tuple $liquidityOrder) inline;

;; $Pool$_fun_liquidityOrder
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, tuple)) $Pool$_fun_liquidityOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $orderId) impure inline_ref;

;; $PerpOrderData$_constructor_perpOrderIndexNext_perpOrder_perpOrderEx
((int, tuple, tuple)) $PerpOrderData$_constructor_perpOrderIndexNext_perpOrder_perpOrderEx(int $perpOrderIndexNext, tuple $perpOrder, tuple $perpOrderEx) inline;

;; $Pool$_fun_perpOrder
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, tuple, tuple)) $Pool$_fun_perpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $orderId) impure inline_ref;

;; $CompensateData$_constructor_compensateIndexNext_compensate
((int, tuple)) $CompensateData$_constructor_compensateIndexNext_compensate(int $compensateIndexNext, tuple $compensate) inline;

;; $Pool$_fun_compensate
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, tuple)) $Pool$_fun_compensate((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $compensateId) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $Pool$_fun_forward
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_forward((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Pool$_fun_reply
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_reply((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, cell $body) impure inline;

;; $Pool$_fun_notify
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_notify((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, cell $body) impure inline;

;; $Pool$_fun_requireNotStopped
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_requireNotStopped((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $Pool$_fun_requireStopped
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_requireStopped((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $Pool$_fun_stopped
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), int) $Pool$_fun_stopped((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $Pool$_fun_requireOwner
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_requireOwner((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $Pool$_fun_owner
((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), slice) $Pool$_fun_owner((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LiquidityOrderCancelledEvent$_constructor_opType_orderId_trxId
((int, int, int)) $LiquidityOrderCancelledEvent$_constructor_opType_orderId_trxId(int $opType, int $orderId, int $trxId) inline;

;; $SendParameters$_constructor_to_value_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_body(slice $to, int $value, int $bounce, cell $body) inline;

;; $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload
((slice, slice, int, cell, int, slice)) $JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload(slice $origin, slice $receiver, int $amount, cell $custom_payload, int $forward_ton_amount, slice $forward_payload) inline;

;; $JettonBurn$_constructor_query_id_amount_response_destination_custom_payload
((int, int, slice, cell)) $JettonBurn$_constructor_query_id_amount_response_destination_custom_payload(int $query_id, int $amount, slice $response_destination, cell $custom_payload) inline;

;; $LiquidityPoolChangedEvent$_constructor_trxId_orderId_opType_account_jettonDelta_tlpPrice_tlpDelta_tlpSupply_lpFundAfter_realizedLpFundingFeeDelta_realizedLpRolloverFeeDelta_entryLpFundingFeeGrowth_entryRolloverFeeGrowth
((int, int, int, slice, int, int, int, int, int, int, int, int, int)) $LiquidityPoolChangedEvent$_constructor_trxId_orderId_opType_account_jettonDelta_tlpPrice_tlpDelta_tlpSupply_lpFundAfter_realizedLpFundingFeeDelta_realizedLpRolloverFeeDelta_entryLpFundingFeeGrowth_entryRolloverFeeGrowth(int $trxId, int $orderId, int $opType, slice $account, int $jettonDelta, int $tlpPrice, int $tlpDelta, int $tlpSupply, int $lpFundAfter, int $realizedLpFundingFeeDelta, int $realizedLpRolloverFeeDelta, int $entryLpFundingFeeGrowth, int $entryRolloverFeeGrowth) inline;

;; $PerpOrderCancelledEvent$_constructor_opType_orderId_trxId
((int, int, int)) $PerpOrderCancelledEvent$_constructor_opType_orderId_trxId(int $opType, int $orderId, int $trxId) inline;

;; $Compensate$_constructor_orderType_orderId_trxId_refundReceiver_refundAmount_executionFeeReceiver_executionFee_unlockTime
((int, int, int, slice, int, slice, int, int)) $Compensate$_constructor_orderType_orderId_trxId_refundReceiver_refundAmount_executionFeeReceiver_executionFee_unlockTime(int $orderType, int $orderId, int $trxId, slice $refundReceiver, int $refundAmount, slice $executionFeeReceiver, int $executionFee, int $unlockTime) inline;

;; $CompensateCreatedEvent$_constructor_compensateId_orderType_orderId_trxId_refundReceiver_refundAmount_executionFeeReceiver_executionFee_unlockTime
((int, int, int, int, slice, int, slice, int, int)) $CompensateCreatedEvent$_constructor_compensateId_orderType_orderId_trxId_refundReceiver_refundAmount_executionFeeReceiver_executionFee_unlockTime(int $compensateId, int $orderType, int $orderId, int $trxId, slice $refundReceiver, int $refundAmount, slice $executionFeeReceiver, int $executionFee, int $unlockTime) inline;

;; $CompensateCancelledEvent$_constructor_compensateId_trxId
((int, int)) $CompensateCancelledEvent$_constructor_compensateId_trxId(int $compensateId, int $trxId) inline;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice $to, int $bounce, int $value, int $mode) inline;

;; $CompensateExecutedEvent$_constructor_compensateId_trxId
((int, int)) $CompensateExecutedEvent$_constructor_compensateId_trxId(int $compensateId, int $trxId) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
