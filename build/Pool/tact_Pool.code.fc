#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Pool.headers.fc";
#include "tact_Pool.stdlib.fc";
#include "tact_Pool.constants.fc";
#include "tact_Pool.storage.fc";

;;
;; Contract Pool functions
;;

(slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $Pool$_contract_init(int $deployId) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = (null(), false, 180, 0, 0, 0, 0, 80000000, 80000000, 80000000, 80000000, 80000000, 80000000, 10000000, 50000000, 100000000, 10000000, __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), __gen_slice_address_61ab4641fa30d9310391025086eec65d200d79268e1b7cd402565e01ba64be3c(), null(), null(), null(), 1, null(), null(), 1, null(), 1, 1, null(), null(), null(), 0, 0, 0, 0, 0, 0, 0);
    $self'owner = __tact_context_get_sender();
    return ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth);
}

() $global_nativeSetCode(cell $newCode) impure asm """
    SETCODE
""";

() $global_nativeSetData(cell $newData) impure asm """
    c4 POP
""";

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_refundJetton((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $query_id, int $amount, slice $destination, slice $response_destination) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    if (($amount > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body(__tact_context_get_sender(), 0, 66, false, $JettonTransfer$_store_cell($JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload($query_id, $amount, $destination, $response_destination, null(), 0, $Cell$_fun_asSlice($Builder$_fun_endCell(store_uint($global_beginCell(), 0, 1)))))));
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_transferJetton((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, slice $to, int $query_id, int $amount, slice $destination, slice $response_destination) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    if (($amount > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($to, $self'gasForTransferJetton, 2, false, $JettonTransfer$_store_cell($JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload($query_id, $amount, $destination, $response_destination, null(), 0, $Cell$_fun_asSlice($Builder$_fun_endCell(store_uint($global_beginCell(), 0, 1)))))));
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_transferEstimatedRemainValue((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $gasConsumption, slice $to, int $executionFeeDelta) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $tonBalanceBeforeMsg = ((($global_myBalance() - $self'totalExecutionFee) + $executionFeeDelta) - $ctx'value);
    $tonBalanceBeforeMsg = $global_max(0, $tonBalanceBeforeMsg);
    int $storageFee = ($self'minTonsForStorage - $global_min($tonBalanceBeforeMsg, $self'minTonsForStorage));
    int $extraValue = (__tact_dict_exists_slice($self'executors, 267, $ctx'sender) ? 0 : $global_max(0, ($tonBalanceBeforeMsg - $self'minTonsForStorage)));
    int $refundValue = (((($ctx'value - $storageFee) - $gasConsumption) + $extraValue) - (($executionFeeDelta > 0) ? $executionFeeDelta : 0));
    if (($refundValue > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode($to, $refundValue, 2));
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_createLiquidityOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $query_id, int $isIncrease, slice $account, int $executionFee, int $jettonDelta) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    slice $wallet = ($isIncrease ? $self'jettonWallet : $self'tlpWallet);
    if (($executionFee < $self'lpMinExecutionFee)) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_refundJetton($query_id, $jettonDelta, $account, $account);
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
    }
    if (($ctx'value < ($self'gasForLpTrader + $executionFee))) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_refundJetton($query_id, $jettonDelta, $account, $account);
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
    }
    int $orderId = $self'liquidityOrderIndexNext;
    $self'liquidityOrderIndexNext = $self'liquidityOrderIndexNext + 1;
    $self'liquidityOrders~__tact_dict_set_uint_cell(64, $orderId, $LiquidityOrder$_store_cell($LiquidityOrder$_constructor_isIncrease_account_jettonDelta_executionFee_blockTime_isPending($isIncrease, $account, $jettonDelta, $executionFee, $global_now(), false)));
    $self'totalExecutionFee = $self'totalExecutionFee + $executionFee;
    $global_emit($LiquidityOrderCreatedEvent$_store_cell($LiquidityOrderCreatedEvent$_constructor_opType_account_jettonDelta_executionFee_orderId_trxId(($isIncrease ? 1 : 2), $account, $jettonDelta, $executionFee, $orderId, $query_id)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferEstimatedRemainValue($self'gasForLpTrader, $account, $executionFee);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), int) $Pool$_fun_createPerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $trxId, int $opType, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $triggerPrice, int $executionFee, int $requestTime) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    int $triggerAbove = false;
    int $orderId = $self'perpOrderIndexNext;
    $self'perpOrderIndexNext = $self'perpOrderIndexNext + 1;
    if (( (($opType == 10)) ? (true) : (($opType == 11)) )) {
        $triggerAbove = (~ $isLong);
    } else {
        if (($opType == 12)) {
            $triggerAbove = $isLong;
        } else {
            $triggerAbove = (($opType == 13) ? $isLong : (~ $isLong));
        }
    }
    int $blockTime = $global_now();
    $self'perpOrders~__tact_dict_set_uint_cell(64, $orderId, $PerpOrder$_store_cell($PerpOrder$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_executionFee_blockTime_isPending($opType, $tokenId, $account, $isLong, $marginDelta, $sizeDelta, $triggerPrice, $triggerAbove, $executionFee, $blockTime, false)));
    $global_emit($PerpOrderCreatedEvent$_store_cell($PerpOrderCreatedEvent$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_executionFee_orderId_triggerPrice_triggerAbove_requestTime_trxId($opType, $tokenId, $account, $isLong, $marginDelta, $sizeDelta, $executionFee, $orderId, $triggerPrice, $triggerAbove, $requestTime, $trxId)));
    var $fresh$ret_0 = $orderId;
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), $fresh$ret_0);
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_createIncreasePerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $query_id, slice $account, int $executionFee, int $isMarket, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $triggerPrice, int $tpSize, int $tpPrice, int $slSize, int $slPrice, int $requestTime) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    if (($ctx'value < ($executionFee + $self'gasForPerpTrader))) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_refundJetton($query_id, $marginDelta, $account, $account);
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
    }
    int $executionFeeMultiple = 1;
    if (( (($tpSize > 0)) ? (($tpPrice > 0)) : (false) )) {
        $executionFeeMultiple = $executionFeeMultiple + 1;
    }
    if (( (($slSize > 0)) ? (($slPrice > 0)) : (false) )) {
        $executionFeeMultiple = $executionFeeMultiple + 1;
    }
    if (($executionFee < ($self'perpMinExecutionFee * $executionFeeMultiple))) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_refundJetton($query_id, $marginDelta, $account, $account);
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
    }
    int $opType = ($isMarket ? 10 : 11);
    int $orderId = ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_createPerpOrder($query_id, $opType, $account, $tokenId, $isLong, $marginDelta, $sizeDelta, $triggerPrice, ($executionFee / $executionFeeMultiple), $requestTime);
    if (( (( (($tpSize > 0)) ? (($tpPrice > 0)) : (false) )) ? (true) : (( (($slSize > 0)) ? (($slPrice > 0)) : (false) )) )) {
        $self'perpOrderExs~__tact_dict_set_uint_cell(64, $orderId, $PerpOrderEx$_store_cell($PerpOrderEx$_constructor_tpSize_tpPrice_slSize_slPrice_executionFee($tpSize, $tpPrice, $slSize, $slPrice, ($executionFee / $executionFeeMultiple))));
    }
    $self'totalExecutionFee = $self'totalExecutionFee + $executionFee;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferEstimatedRemainValue($self'gasForPerpTrader, $account, $executionFee);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_increasePerpPosition((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $trxId, int $orderId, int $opType, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice, int $fundingFeeGrowth, int $rolloverFeeGrowth, slice $executionFeeReceiver) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_uint_cell($self'tokenConfigs, 16, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'maintenanceRate, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    var ($order'opType, $order'tokenId, $order'account, $order'isLong, $order'marginDelta, $order'sizeDelta, $order'triggerPrice, $order'triggerAbove, $order'executionFee, $order'blockTime, $order'isPending) = $PerpOrder$_not_null($PerpOrder$_load_opt(__tact_dict_get_uint_cell($self'perpOrders, 64, $orderId)));
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_uint_cell($self'perpPositions, 16, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth));
    if (($perpPosition'size == 0)) {
        $perpPosition'positionId = $self'perpPositionIndexNext;
        $self'perpPositionIndexNext = $self'perpPositionIndexNext + 1;
    }
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_uint_cell($self'globalPositions, 16, $tokenId));
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue) = ((~ null?($globalPositionOpt)) ? $GlobalPosition$_not_null($globalPositionOpt) : $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longValue_shortValue(0, 0, 0, 0, 0, 0));
    if ($isLong) {
        $globalPosition'longSize = $globalPosition'longSize + $sizeDelta;
    } else {
        $globalPosition'shortSize = $globalPosition'shortSize + $sizeDelta;
    }
    $globalPosition'longValue = (($globalPosition'longSize * $tradePrice) / 1000000000000000000);
    $globalPosition'shortValue = (($globalPosition'shortSize * $tradePrice) / 1000000000000000000);
    tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_uint_cell($self'globalLPPositions, 16, $tokenId));
    var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice) = ((~ null?($globalLPPositionOpt)) ? $GlobalLPPosition$_not_null($globalLPPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(0, false, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLPPosition'netSize > 0)) ? (($isLong == $globalLPPosition'isLong)) : (false) )) {
        int $sizeUsed = $global_min($globalLPPosition'netSize, $sizeDelta);
        if ($isLong) {
            $lpRealizedPnl = (($sizeUsed * ($tradePrice - $globalLPPosition'entryPrice)) / 1000000000000000000);
        } else {
            $lpRealizedPnl = (($sizeUsed * ($globalLPPosition'entryPrice - $tradePrice)) / 1000000000000000000);
        }
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLPPosition'netSize = $globalLPPosition'netSize - $sizeUsed;
        if (($globalLPPosition'netSize == 0)) {
            $globalLPPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLPPosition'entryPrice = ((($globalLPPosition'netSize * $globalLPPosition'entryPrice) + ($sizeRemaining * $tradePrice)) / ($globalLPPosition'netSize + $sizeRemaining));
        $globalLPPosition'netSize = $globalLPPosition'netSize + $sizeRemaining;
        $globalLPPosition'isLong = (~ $isLong);
    }
    int $tradingFee = 0;
    int $lpTradingFee = 0;
    if (($sizeDelta > 0)) {
        $tradingFee = ((($sizeDelta * $tradePrice) * $tokenConfig'tradingFeeRate) / 1000000000000000000000000000);
        $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000000);
        int $tradoorProfit = 0;
        if (($lpRealizedPnl > 0)) {
            $tradoorProfit = ($lpRealizedPnl * $self'normalPositionShareRate);
        }
        $self'protocolTradingFee = $self'protocolTradingFee + (($tradingFee - $lpTradingFee) + $tradoorProfit);
        $self'globalLPFund = $self'globalLPFund + (($lpRealizedPnl - $tradoorProfit) + $lpTradingFee);
    }
    int $fundingFee = ((($fundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 1000000000000000000);
    int $rolloverFee = ((($rolloverFeeGrowth - $perpPosition'entryRolloverFeeGrowth) * $perpPosition'size) / 1000000000000000000);
    int $marginBefore = $perpPosition'margin;
    $perpPosition'margin = $perpPosition'margin + ((($marginDelta + $fundingFee) - $tradingFee) - $rolloverFee);
    int $marginDeltaAfter = ($perpPosition'margin - $marginBefore);
    $perpPosition'entryPrice = ((($perpPosition'size * $perpPosition'entryPrice) + ($sizeDelta * $tradePrice)) / ($perpPosition'size + $sizeDelta));
    $perpPosition'size = $perpPosition'size + $sizeDelta;
    $perpPosition'entryFundingFeeGrowth = $fundingFeeGrowth;
    $perpPosition'entryRolloverFeeGrowth = $rolloverFeeGrowth;
    int $unrealizedPnl = 0;
    if ($isLong) {
        $unrealizedPnl = (($perpPosition'size * ($tradePrice - $perpPosition'entryPrice)) / 1000000000000000000);
    } else {
        $unrealizedPnl = (($perpPosition'size * ($perpPosition'entryPrice - $tradePrice)) / 1000000000000000000);
    }
    int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * ($tokenConfig'tradingFeeRate + $tokenConfig'maintenanceRate)) / 1000000000000000000000000000) + $tokenConfig'liquidationFee);
    throw_unless(28603, ($maintenanceMargin < ($perpPosition'margin + $unrealizedPnl)));
    throw_unless(17312, (($perpPosition'margin * $tokenConfig'maxLeverage) >= (($perpPosition'size * $perpPosition'entryPrice) / 1000000000000000000)));
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth);
        $globalPosition'longMargin = $globalPosition'longMargin + $marginDeltaAfter;
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth);
        $globalPosition'shortMargin = $globalPosition'shortMargin + $marginDeltaAfter;
    }
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth))));
    $self'perpPositions~__tact_dict_set_uint_cell(16, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalPositions~__tact_dict_set_uint_cell(16, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue)));
    $self'globalLPPositions~__tact_dict_set_uint_cell(16, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice)));
    int $executionFeeMultiple = 1;
    tuple $orderExOpt = $PerpOrderEx$_load_opt(__tact_dict_get_uint_cell($self'perpOrderExs, 64, $orderId));
    if ((~ null?($orderExOpt))) {
        var ($orderEx'tpSize, $orderEx'tpPrice, $orderEx'slSize, $orderEx'slPrice, $orderEx'executionFee) = $PerpOrderEx$_not_null($orderExOpt);
        if (( (($orderEx'tpSize > 0)) ? (($orderEx'tpPrice > 0)) : (false) )) {
            $executionFeeMultiple = $executionFeeMultiple + 1;
            ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_createPerpOrder($trxId, 13, $order'account, $order'tokenId, $order'isLong, 0, $orderEx'tpSize, $orderEx'tpPrice, $orderEx'executionFee, $global_now());
        }
        if (( (($orderEx'slSize > 0)) ? (($orderEx'slPrice > 0)) : (false) )) {
            $executionFeeMultiple = $executionFeeMultiple + 1;
            ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_createPerpOrder($trxId, 14, $order'account, $order'tokenId, $order'isLong, 0, $orderEx'slSize, $orderEx'slPrice, $orderEx'executionFee, $global_now());
        }
        $self'perpOrderExs~__tact_dict_delete_uint(64, $orderId);
    }
    $self'perpOrders~__tact_dict_delete_uint(64, $orderId);
    if (($order'executionFee > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode($executionFeeReceiver, $order'executionFee, 2));
        $self'totalExecutionFee = $self'totalExecutionFee - $order'executionFee;
    }
    $global_emit($PerpPositionIncreasedEvent$_store_cell($PerpPositionIncreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_tradingFee_fundingFee_rolloverFee_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_globalLongValueAfter_globalShortValueAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl($trxId, $orderId, $opType, $perpPosition'positionId, $account, $tokenId, $isLong, $marginDeltaAfter, $perpPosition'margin, $sizeDelta, $perpPosition'size, $tradePrice, $perpPosition'entryPrice, $tradingFee, $fundingFee, $rolloverFee, $fundingFeeGrowth, $rolloverFeeGrowth, $globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue, $globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $self'globalLPFund, $lpTradingFee, $lpRealizedPnl)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferEstimatedRemainValue(($self'gasForPerpExecutor * $executionFeeMultiple), __tact_context_get_sender(), (- $order'executionFee));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_decreasePerpPosition((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $trxId, int $orderId, int $opType, slice $account, int $tokenId, int $isLong, int $marginDelta, int $sizeDelta, int $tradePrice, int $fundingFeeGrowth, int $rolloverFeeGrowth, slice $executionFeeReceiver) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_uint_cell($self'tokenConfigs, 16, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'maintenanceRate, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    var ($order'opType, $order'tokenId, $order'account, $order'isLong, $order'marginDelta, $order'sizeDelta, $order'triggerPrice, $order'triggerAbove, $order'executionFee, $order'blockTime, $order'isPending) = $PerpOrder$_not_null($PerpOrder$_load_opt(__tact_dict_get_uint_cell($self'perpOrders, 64, $orderId)));
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_uint_cell($self'perpPositions, 16, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth));
    throw_unless(5238, ($perpPosition'size > 0));
    if (($sizeDelta > $perpPosition'size)) {
        $sizeDelta = $perpPosition'size;
    }
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_uint_cell($self'globalPositions, 16, $tokenId));
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue) = ((~ null?($globalPositionOpt)) ? $GlobalPosition$_not_null($globalPositionOpt) : $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longValue_shortValue(0, 0, 0, 0, 0, 0));
    int $fundingFee = ((($fundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 1000000000000000000);
    int $rolloverFee = ((($rolloverFeeGrowth - $perpPosition'entryRolloverFeeGrowth) * $perpPosition'size) / 1000000000000000000);
    tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_uint_cell($self'globalLPPositions, 16, $tokenId));
    var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice) = ((~ null?($globalLPPositionOpt)) ? $GlobalLPPosition$_not_null($globalLPPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(0, false, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLPPosition'netSize > 0)) ? (($isLong != $globalLPPosition'isLong)) : (false) )) {
        int $sizeUsed = $global_min($globalLPPosition'netSize, $sizeDelta);
        if ((~ $isLong)) {
            $lpRealizedPnl = (($sizeUsed * ($tradePrice - $globalLPPosition'entryPrice)) / 1000000000000000000);
        } else {
            $lpRealizedPnl = (($sizeUsed * ($globalLPPosition'entryPrice - $tradePrice)) / 1000000000000000000);
        }
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLPPosition'netSize = $globalLPPosition'netSize - $sizeUsed;
        if (($globalLPPosition'netSize == 0)) {
            $globalLPPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLPPosition'entryPrice = ((($globalLPPosition'netSize * $globalLPPosition'entryPrice) + ($sizeRemaining * $tradePrice)) / ($globalLPPosition'netSize + $sizeRemaining));
        $globalLPPosition'netSize = $globalLPPosition'netSize + $sizeRemaining;
        $globalLPPosition'isLong = $isLong;
    }
    int $tradingFee = 0;
    int $lpTradingFee = 0;
    if (($sizeDelta > 0)) {
        $tradingFee = ((($sizeDelta * $tradePrice) * $tokenConfig'tradingFeeRate) / 1000000000000000000000000000);
        $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000000);
        int $tradoorProfit = 0;
        if (($lpRealizedPnl > 0)) {
            $tradoorProfit = ($lpRealizedPnl * $self'normalPositionShareRate);
        }
        $self'protocolTradingFee = $self'protocolTradingFee + (($tradingFee - $lpTradingFee) + $tradoorProfit);
        $self'globalLPFund = $self'globalLPFund + (($lpRealizedPnl - $tradoorProfit) + $lpTradingFee);
    }
    int $positionId = $perpPosition'positionId;
    int $payout = 0;
    int $realizedPnl = 0;
    if ($isLong) {
        $realizedPnl = (($sizeDelta * ($tradePrice - $perpPosition'entryPrice)) / 1000000000000000000);
    } else {
        $realizedPnl = (($sizeDelta * ($perpPosition'entryPrice - $tradePrice)) / 1000000000000000000);
    }
    int $marginBefore = $perpPosition'margin;
    $perpPosition'margin = $perpPosition'margin + ((($realizedPnl + $fundingFee) - $tradingFee) - $rolloverFee);
    throw_unless(62409, ($perpPosition'margin >= 0));
    if (( (( (($sizeDelta > 0)) ? (($sizeDelta < $perpPosition'size)) : (false) )) ? (($marginDelta == 0)) : (false) )) {
        $marginDelta = (($perpPosition'margin * $sizeDelta) / $perpPosition'size);
    }
    if (($marginDelta > $perpPosition'margin)) {
        $marginDelta = $perpPosition'margin;
    }
    $perpPosition'margin = $perpPosition'margin - $marginDelta;
    $perpPosition'size = $perpPosition'size - $sizeDelta;
    $perpPosition'entryFundingFeeGrowth = $fundingFeeGrowth;
    $perpPosition'entryRolloverFeeGrowth = $rolloverFeeGrowth;
    int $marginDeltaAfter = ($marginBefore - $perpPosition'margin);
    if (($perpPosition'size > 0)) {
        int $unrealizedPnl = 0;
        if ($isLong) {
            $unrealizedPnl = (($perpPosition'size * ($tradePrice - $perpPosition'entryPrice)) / 1000000000000000000);
        } else {
            $unrealizedPnl = (($perpPosition'size * ($perpPosition'entryPrice - $tradePrice)) / 1000000000000000000);
        }
        int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * ($tokenConfig'tradingFeeRate + $tokenConfig'maintenanceRate)) / 1000000000000000000000000000) + $tokenConfig'liquidationFee);
        throw_unless(28603, ($maintenanceMargin < ($perpPosition'margin + $unrealizedPnl)));
        throw_unless(17312, (($perpPosition'margin * $tokenConfig'maxLeverage) >= (($perpPosition'size * $perpPosition'entryPrice) / 1000000000000000000)));
        $payout = $marginDelta;
    } else {
        $marginDeltaAfter = $marginDeltaAfter + $perpPosition'margin;
        $payout = ($marginDelta + $perpPosition'margin);
        ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth) = $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0);
    }
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth);
        $globalPosition'longMargin = $globalPosition'longMargin - $marginDeltaAfter;
        $globalPosition'longSize = $globalPosition'longSize - $sizeDelta;
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth);
        $globalPosition'shortMargin = $globalPosition'shortMargin - $marginDeltaAfter;
        $globalPosition'shortSize = $globalPosition'shortSize - $sizeDelta;
    }
    $globalPosition'longValue = (($globalPosition'longSize * $tradePrice) / 1000000000000000000);
    $globalPosition'shortValue = (($globalPosition'shortSize * $tradePrice) / 1000000000000000000);
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth))));
    $self'perpPositions~__tact_dict_set_uint_cell(16, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalPositions~__tact_dict_set_uint_cell(16, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue)));
    $self'globalLPPositions~__tact_dict_set_uint_cell(16, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice)));
    $self'perpOrders~__tact_dict_delete_uint(64, $orderId);
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferJetton($self'jettonWallet, $trxId, $payout, $order'account, __tact_context_get_sender());
    if (($order'executionFee > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode($executionFeeReceiver, $order'executionFee, 2));
        $self'totalExecutionFee = $self'totalExecutionFee - $order'executionFee;
    }
    $global_emit($PerpPositionDecreasedEvent$_store_cell($PerpPositionDecreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_realizedPnLDelta_tradingFee_fundingFee_rolloverFee_payout_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_globalLongValueAfter_globalShortValueAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl($trxId, $orderId, $opType, $positionId, $account, $tokenId, $isLong, $marginDeltaAfter, $perpPosition'margin, $sizeDelta, $perpPosition'size, $tradePrice, $perpPosition'entryPrice, $realizedPnl, $tradingFee, $fundingFee, $rolloverFee, $payout, $fundingFeeGrowth, $rolloverFeeGrowth, $globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue, $globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $self'globalLPFund, $lpTradingFee, $lpRealizedPnl)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferEstimatedRemainValue(($self'gasForPerpExecutor + (($payout > 0) ? $self'gasForTransferJetton : 0)), __tact_context_get_sender(), (- $order'executionFee));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_liquidatePerpPosition((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $trxId, int $orderId, slice $account, int $tokenId, int $isLong, int $tradePrice, int $fundingFeeGrowth, int $rolloverFeeGrowth, slice $liquidationFeeReceiver) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    tuple $tokenConfigOpt = $TokenConfig$_load_opt(__tact_dict_get_uint_cell($self'tokenConfigs, 16, $tokenId));
    throw_unless(27798, (~ null?($tokenConfigOpt)));
    var ($tokenConfig'name, $tokenConfig'enable, $tokenConfig'maxLeverage, $tokenConfig'liquidationFee, $tokenConfig'maintenanceRate, $tokenConfig'tradingFeeRate, $tokenConfig'lpTradingFeeRate) = $TokenConfig$_not_null($tokenConfigOpt);
    throw_unless(36718, $tokenConfig'enable);
    var ($order'opType, $order'tokenId, $order'account, $order'isLong, $order'marginDelta, $order'sizeDelta, $order'triggerPrice, $order'triggerAbove, $order'executionFee, $order'blockTime, $order'isPending) = $PerpOrder$_not_null($PerpOrder$_load_opt(__tact_dict_get_uint_cell($self'perpOrders, 64, $orderId)));
    tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_uint_cell($self'perpPositions, 16, $tokenId));
    var ($accountPerpPosition'positions) = ((~ null?($accountPerpPositionOpt)) ? $AccountPerpPosition$_not_null($accountPerpPositionOpt) : $AccountPerpPosition$_constructor_positions(null()));
    tuple $directionPerpPositionOpt = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($accountPerpPosition'positions, 267, $account));
    var (($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth)) = ((~ null?($directionPerpPositionOpt)) ? $DirectionPerpPosition$_not_null($directionPerpPositionOpt) : $DirectionPerpPosition$_constructor_longPosition_shortPosition($PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0), $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0)));
    var ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth) = ($isLong ? ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth) : ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth));
    throw_unless(5238, ($perpPosition'size > 0));
    int $marginDelta = $perpPosition'margin;
    int $sizeDelta = $perpPosition'size;
    tuple $globalPositionOpt = $GlobalPosition$_load_opt(__tact_dict_get_uint_cell($self'globalPositions, 16, $tokenId));
    var ($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue) = ((~ null?($globalPositionOpt)) ? $GlobalPosition$_not_null($globalPositionOpt) : $GlobalPosition$_constructor_longMargin_shortMargin_longSize_shortSize_longValue_shortValue(0, 0, 0, 0, 0, 0));
    int $fundingFee = ((($fundingFeeGrowth - $perpPosition'entryFundingFeeGrowth) * $perpPosition'size) / 1000000000000000000);
    int $rolloverFee = ((($rolloverFeeGrowth - $perpPosition'entryRolloverFeeGrowth) * $perpPosition'size) / 1000000000000000000);
    int $unrealizedPnl = 0;
    if ($isLong) {
        $unrealizedPnl = (($perpPosition'size * ($tradePrice - $perpPosition'entryPrice)) / 1000000000000000000);
    } else {
        $unrealizedPnl = (($perpPosition'size * ($perpPosition'entryPrice - $tradePrice)) / 1000000000000000000);
    }
    int $maintenanceMargin = (((($perpPosition'size * $tradePrice) * ($tokenConfig'tradingFeeRate + $tokenConfig'maintenanceRate)) / 1000000000000000000000000000) + $tokenConfig'liquidationFee);
    throw_unless(40940, ($maintenanceMargin >= ((($perpPosition'margin + $fundingFee) - $rolloverFee) + $unrealizedPnl)));
    int $bankruptcyPrice = (((((($perpPosition'margin + $fundingFee) - $rolloverFee) - $tokenConfig'liquidationFee) * 1000000000000000000) + ($isLong ? ((- $perpPosition'entryPrice) * $perpPosition'size) : ($perpPosition'entryPrice * $perpPosition'size))) / (($perpPosition'size * ($tokenConfig'tradingFeeRate + ($isLong ? -1000000000 : 1000000000))) / 1000000000));
    tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_uint_cell($self'globalLPPositions, 16, $tokenId));
    var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice) = ((~ null?($globalLPPositionOpt)) ? $GlobalLPPosition$_not_null($globalLPPositionOpt) : $GlobalLPPosition$_constructor_netSize_isLong_entryPrice(0, false, 0));
    int $lpRealizedPnl = 0;
    int $sizeRemaining = $sizeDelta;
    if (( (($globalLPPosition'netSize > 0)) ? (($isLong != $globalLPPosition'isLong)) : (false) )) {
        int $sizeUsed = $global_min($globalLPPosition'netSize, $sizeDelta);
        if ((~ $isLong)) {
            $lpRealizedPnl = (($sizeUsed * ($bankruptcyPrice - $globalLPPosition'entryPrice)) / 1000000000000000000);
        } else {
            $lpRealizedPnl = (($sizeUsed * ($globalLPPosition'entryPrice - $bankruptcyPrice)) / 1000000000000000000);
        }
        $sizeRemaining = $sizeRemaining - $sizeUsed;
        $globalLPPosition'netSize = $globalLPPosition'netSize - $sizeUsed;
        if (($globalLPPosition'netSize == 0)) {
            $globalLPPosition'entryPrice = 0;
        }
    }
    if (($sizeRemaining > 0)) {
        $globalLPPosition'entryPrice = ((($globalLPPosition'netSize * $globalLPPosition'entryPrice) + ($sizeRemaining * $bankruptcyPrice)) / ($globalLPPosition'netSize + $sizeRemaining));
        $globalLPPosition'netSize = $globalLPPosition'netSize + $sizeRemaining;
        $globalLPPosition'isLong = $isLong;
    }
    int $tradingFee = ((($sizeDelta * $bankruptcyPrice) * $tokenConfig'tradingFeeRate) / 1000000000000000000000000000);
    int $lpTradingFee = (($tradingFee * $tokenConfig'lpTradingFeeRate) / 1000000000);
    int $protocolTradingFee = ($tradingFee - $lpTradingFee);
    int $tradoorProfit = ($lpRealizedPnl * $self'liquidatedPositionShareRate);
    $self'protocolTradingFee = $self'protocolTradingFee + ($protocolTradingFee + $tradoorProfit);
    $self'globalLPFund = $self'globalLPFund + (($lpRealizedPnl - $tradoorProfit) + $lpTradingFee);
    int $positionId = $perpPosition'positionId;
    int $payout = $tokenConfig'liquidationFee;
    int $realizedPnl = (- ((($marginDelta - $tradingFee) + $fundingFee) - $rolloverFee));
    ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth) = $PerpPosition$_constructor_positionId_margin_size_entryPrice_entryFundingFeeGrowth_entryRolloverFeeGrowth(0, 0, 0, 0, 0, 0);
    if ($isLong) {
        ($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth);
        $globalPosition'longMargin = $globalPosition'longMargin - $marginDelta;
        $globalPosition'longSize = $globalPosition'longSize - $sizeDelta;
    } else {
        ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth) = ($perpPosition'positionId, $perpPosition'margin, $perpPosition'size, $perpPosition'entryPrice, $perpPosition'entryFundingFeeGrowth, $perpPosition'entryRolloverFeeGrowth);
        $globalPosition'shortMargin = $globalPosition'shortMargin - $marginDelta;
        $globalPosition'shortSize = $globalPosition'shortSize - $sizeDelta;
    }
    $globalPosition'longValue = (($globalPosition'longSize * $tradePrice) / 1000000000000000000);
    $globalPosition'shortValue = (($globalPosition'shortSize * $tradePrice) / 1000000000000000000);
    $accountPerpPosition'positions~__tact_dict_set_slice_cell(267, $account, $DirectionPerpPosition$_store_cell((($directionPerpPosition'longPosition'positionId, $directionPerpPosition'longPosition'margin, $directionPerpPosition'longPosition'size, $directionPerpPosition'longPosition'entryPrice, $directionPerpPosition'longPosition'entryFundingFeeGrowth, $directionPerpPosition'longPosition'entryRolloverFeeGrowth), ($directionPerpPosition'shortPosition'positionId, $directionPerpPosition'shortPosition'margin, $directionPerpPosition'shortPosition'size, $directionPerpPosition'shortPosition'entryPrice, $directionPerpPosition'shortPosition'entryFundingFeeGrowth, $directionPerpPosition'shortPosition'entryRolloverFeeGrowth))));
    $self'perpPositions~__tact_dict_set_uint_cell(16, $tokenId, $AccountPerpPosition$_store_cell(($accountPerpPosition'positions)));
    $self'globalPositions~__tact_dict_set_uint_cell(16, $tokenId, $GlobalPosition$_store_cell(($globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue)));
    $self'globalLPPositions~__tact_dict_set_uint_cell(16, $tokenId, $GlobalLPPosition$_store_cell(($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice)));
    $self'perpOrders~__tact_dict_delete_uint(64, $orderId);
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferJetton($self'jettonWallet, $trxId, $payout, $liquidationFeeReceiver, __tact_context_get_sender());
    if (($order'executionFee > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode($liquidationFeeReceiver, $order'executionFee, 2));
        $self'totalExecutionFee = $self'totalExecutionFee - $order'executionFee;
    }
    $global_emit($PerpPositionDecreasedEvent$_store_cell($PerpPositionDecreasedEvent$_constructor_trxId_orderId_opType_positionId_account_tokenId_isLong_marginDelta_marginAfter_sizeDelta_sizeAfter_tradePrice_entryPrice_realizedPnLDelta_tradingFee_fundingFee_rolloverFee_payout_entryFundingFeeGrowthAfter_entryRolloverFeeGrowthAfter_globalLongMarginAfter_globalShortMarginAfter_globalLongSizeAfter_globalShortSizeAfter_globalLongValueAfter_globalShortValueAfter_lpNetSizeAfter_lpIsLong_lpEntryPriceAfter_lpFundAfter_lpTradingFee_lpRealizedPnl($trxId, $orderId, 3, $positionId, $account, $tokenId, $isLong, $marginDelta, $perpPosition'margin, $sizeDelta, $perpPosition'size, $bankruptcyPrice, $perpPosition'entryPrice, $realizedPnl, $tradingFee, $fundingFee, $rolloverFee, $payout, $fundingFeeGrowth, $rolloverFeeGrowth, $globalPosition'longMargin, $globalPosition'shortMargin, $globalPosition'longSize, $globalPosition'shortSize, $globalPosition'longValue, $globalPosition'shortValue, $globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice, $self'globalLPFund, $lpTradingFee, $lpRealizedPnl)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferEstimatedRemainValue(($self'gasForPerpExecutor + (($payout > 0) ? $self'gasForTransferJetton : 0)), __tact_context_get_sender(), (- $order'executionFee));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, int, int)) $Pool$_fun_accountInfo((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, slice $account) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    int $isExecutor = __tact_dict_exists_slice($self'executors, 267, $account);
    int $isCompensator = ( __tact_slice_eq_bits($account, $self'compensator) );
    int $isClaimer = ( __tact_slice_eq_bits($account, $self'claimer) );
    var $fresh$ret_1 = $AccountInfo$_constructor_isExecutor_isCompensator_isClaimer($isExecutor, $isCompensator, $isClaimer);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), $fresh$ret_1);
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, tuple, tuple, tuple)) $Pool$_fun_perpPosition((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $tokenId, slice $account) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    tuple $position = null();
    if ((~ null?($account))) {
        tuple $accountPerpPositionOpt = $AccountPerpPosition$_load_opt(__tact_dict_get_uint_cell($self'perpPositions, 16, $tokenId));
        if ((~ null?($accountPerpPositionOpt))) {
            $position = $DirectionPerpPosition$_load_opt(__tact_dict_get_slice_cell($AccountPerpPosition$_get_positions($AccountPerpPosition$_not_null($accountPerpPositionOpt)), 267, __tact_not_null($account)));
        }
    }
    var $fresh$ret_2 = $PerpPositionData$_constructor_perpPositionIndexNext_perpPosition_globalLPPosition_globalPosition($self'perpPositionIndexNext, $position, $GlobalLPPosition$_load_opt(__tact_dict_get_uint_cell($self'globalLPPositions, 16, $tokenId)), $GlobalPosition$_load_opt(__tact_dict_get_uint_cell($self'globalPositions, 16, $tokenId)));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), $fresh$ret_2);
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, int)) $Pool$_fun_configData((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    var $fresh$ret_3 = $ConfigData$_constructor_orderLockTime_lpMinExecutionFee_perpMinExecutionFee_gasForLpTrader_gasForLpExecutor_gasForPerpTrader_gasForPerpExecutor_minTonsForStorage_gasForTransferJetton_gasForBurnTlp_gasForMintTlp_tlpWallet_jettonWallet_tlpJetton_maxLpNetCap($self'orderLockTime, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'minTonsForStorage, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'tlpWallet, $self'jettonWallet, $self'tlpJetton, $self'maxLpNetCap);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), $fresh$ret_3);
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), tuple) $Pool$_fun_tokenConfig((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $tokenId) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    var $fresh$ret_4 = $TokenConfig$_load_opt(__tact_dict_get_uint_cell($self'tokenConfigs, 16, $tokenId));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), $fresh$ret_4);
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, int, int, int, int, int, int)) $Pool$_fun_poolStat((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    var $fresh$ret_5 = $PoolStat$_constructor_tlpSupply_totalExecutionFee_protocolTradingFee_globalLPFund_globalLPUnrealizedPnl_globalLpFundingFeeGrowth_globalRolloverFeeGrowth($self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), $fresh$ret_5);
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, tuple)) $Pool$_fun_liquidityOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $orderId) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    var $fresh$ret_6 = $LiquidityOrderData$_constructor_liquidityOrderIndexNext_liquidityOrder($self'liquidityOrderIndexNext, $LiquidityOrder$_load_opt(__tact_dict_get_uint_cell($self'liquidityOrders, 64, $orderId)));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), $fresh$ret_6);
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, tuple, tuple)) $Pool$_fun_perpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $orderId) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    var $fresh$ret_7 = $PerpOrderData$_constructor_perpOrderIndexNext_perpOrder_perpOrderEx($self'perpOrderIndexNext, $PerpOrder$_load_opt(__tact_dict_get_uint_cell($self'perpOrders, 64, $orderId)), $PerpOrderEx$_load_opt(__tact_dict_get_uint_cell($self'perpOrderExs, 64, $orderId)));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), $fresh$ret_7);
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), (int, tuple)) $Pool$_fun_compensate((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, int $compensateId) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    var $fresh$ret_8 = $CompensateData$_constructor_compensateIndexNext_compensate($self'compensateIndexNext, $Compensate$_load_opt(__tact_dict_get_uint_cell($self'compensates, 64, $compensateId)));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), $fresh$ret_8);
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_requireNotStopped((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    throw_unless(40368, (~ $self'stopped));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_requireStopped((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    throw_unless(53296, $self'stopped);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), int) $Pool$_fun_stopped((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    var $fresh$ret_9 = $self'stopped;
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), $fresh$ret_9);
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_fun_requireOwner((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    throw_unless(132, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), slice) $Pool$_fun_owner((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)) = $self;
    var $fresh$ret_10 = $self'owner;
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), $fresh$ret_10);
}

;;
;; Receivers of a Contract Pool
;;

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_UpdateConfig((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (int, int, int, int, int, tuple, tuple, tuple) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'orderLockTime, $msg'maxLpNetCap, $msg'lpRolloverFeeRate, $msg'liquidatedPositionShareRate, $msg'normalPositionShareRate, $msg'gasConfig, $msg'executorConfig, $msg'contractConfig) = $msg;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_requireOwner();
    $self'orderLockTime = $msg'orderLockTime;
    $self'maxLpNetCap = $msg'maxLpNetCap;
    $self'lpRolloverFeeRate = $msg'lpRolloverFeeRate;
    $self'liquidatedPositionShareRate = $msg'liquidatedPositionShareRate;
    $self'normalPositionShareRate = $msg'normalPositionShareRate;
    tuple $contractConfig = $msg'contractConfig;
    if ((~ null?($contractConfig))) {
        $self'tlpJetton = $ContractConfig$_get_tlpJetton($ContractConfig$_not_null($contractConfig));
        $self'tlpWallet = $ContractConfig$_get_tlpWallet($ContractConfig$_not_null($contractConfig));
        $self'jettonWallet = $ContractConfig$_get_jettonWallet($ContractConfig$_not_null($contractConfig));
    }
    tuple $executorConfig = $msg'executorConfig;
    if ((~ null?($executorConfig))) {
        cell $executors = $ExecutorConfig$_get_executors($ExecutorConfig$_not_null($executorConfig));
        var ($executor, $enable, $fresh$flag_11) = __tact_dict_min_slice_int($executors, 267, 1);
        while ($fresh$flag_11) {
            $self'executors~__tact_dict_set_slice_int(267, $executor, ($enable ? true : null()), 1);
            ($executor, $enable, $fresh$flag_11) = __tact_dict_next_slice_int($executors, 267, $executor, 1);
        }
        $self'compensator = $ExecutorConfig$_get_compensator($ExecutorConfig$_not_null($executorConfig));
        $self'claimer = $ExecutorConfig$_get_claimer($ExecutorConfig$_not_null($executorConfig));
    }
    tuple $gasConfig = $msg'gasConfig;
    if ((~ null?($gasConfig))) {
        $self'gasForPerpTrader = $GasConfig$_get_gasForPerpTrader($GasConfig$_not_null($gasConfig));
        $self'gasForPerpExecutor = $GasConfig$_get_gasForPerpExecutor($GasConfig$_not_null($gasConfig));
        $self'gasForLpTrader = $GasConfig$_get_gasForLpTrader($GasConfig$_not_null($gasConfig));
        $self'gasForLpExecutor = $GasConfig$_get_gasForLpExecutor($GasConfig$_not_null($gasConfig));
        $self'minTonsForStorage = $GasConfig$_get_minTonsForStorage($GasConfig$_not_null($gasConfig));
        $self'gasForTransferJetton = $GasConfig$_get_gasForTransferJetton($GasConfig$_not_null($gasConfig));
        $self'lpMinExecutionFee = $GasConfig$_get_lpMinExecutionFee($GasConfig$_not_null($gasConfig));
        $self'perpMinExecutionFee = $GasConfig$_get_perpMinExecutionFee($GasConfig$_not_null($gasConfig));
        $self'gasForBurnTlp = $GasConfig$_get_gasForBurnTlp($GasConfig$_not_null($gasConfig));
        $self'gasForMintTlp = $GasConfig$_get_gasForMintTlp($GasConfig$_not_null($gasConfig));
    }
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_reply(__gen_cell_comment_6295eb1c7c2429a7653770536e6fe4b297a8392349c80f082ccbf76fc3404f1f());
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_JettonUpdateContent((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (cell) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'jetton_content) = $msg;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_requireOwner();
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_forward($self'tlpJetton, $JettonUpdateContent$_store_cell(($msg'jetton_content)), true, null());
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_ListToken((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (int, (slice, int, int, int, int, int, int)) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'tokenId, ($msg'config'name, $msg'config'enable, $msg'config'maxLeverage, $msg'config'liquidationFee, $msg'config'maintenanceRate, $msg'config'tradingFeeRate, $msg'config'lpTradingFeeRate)) = $msg;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_requireOwner();
    $self'tokenConfigs~__tact_dict_set_uint_cell(16, $msg'tokenId, $TokenConfig$_store_cell(($msg'config'name, $msg'config'enable, $msg'config'maxLeverage, $msg'config'liquidationFee, $msg'config'maintenanceRate, $msg'config'tradingFeeRate, $msg'config'lpTradingFeeRate)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_reply(__gen_cell_comment_ec53be045084956b5e35b88d999e936a3e05b8be427fad5b1f84019a80f3a677());
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_DelistToken((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'tokenId) = $msg;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_requireOwner();
    tuple $position = $GlobalPosition$_load_opt(__tact_dict_get_uint_cell($self'globalPositions, 16, $msg'tokenId));
    if ((~ null?($position))) {
        throw_unless(24325, (($GlobalPosition$_get_longSize($GlobalPosition$_not_null($position)) + $GlobalPosition$_get_shortSize($GlobalPosition$_not_null($position))) == 0));
    }
    $self'tokenConfigs~__tact_dict_delete_uint(16, $msg'tokenId);
    $self'globalPositions~__tact_dict_delete_uint(16, $msg'tokenId);
    $self'globalLPPositions~__tact_dict_delete_uint(16, $msg'tokenId);
    $self'perpPositions~__tact_dict_delete_uint(16, $msg'tokenId);
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_reply(__gen_cell_comment_594c1f31d48ebe4187726a1bc890e98cb4eea0cb233b1f511b8c80a064829484());
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_ClaimProtocolFee((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (int, slice) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'trxId, $msg'feeReceiver) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits($self'claimer, __tact_context_get_sender()) ));
    throw_unless(19163, ($self'protocolTradingFee > 0));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'jettonWallet, 0, 66, false, $JettonTransfer$_store_cell($JettonTransfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload($msg'trxId, $self'protocolTradingFee, $msg'feeReceiver, $msg'feeReceiver, null(), 0, $Cell$_fun_asSlice($Builder$_fun_endCell(store_uint($global_beginCell(), 0, 1)))))));
    $self'protocolTradingFee = 0;
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) %$Pool$_internal_empty((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_JettonTransferNotification((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'query_id, $msg'amount, $msg'sender, $msg'forward_payload) = $msg;
    if (( (( ~ __tact_slice_eq_bits($self'jettonWallet, __tact_context_get_sender()) )) ? (( ~ __tact_slice_eq_bits($self'tlpWallet, __tact_context_get_sender()) )) : (false) )) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_refundJetton($msg'query_id, $msg'amount, $msg'sender, $msg'sender);
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
    }
    if (( ($self'stopped) ? (true) : (($msg'forward_payload~load_uint(1) != 1)) )) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_refundJetton($msg'query_id, $msg'amount, $msg'sender, $msg'sender);
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
    }
    if (( __tact_slice_eq_bits($self'tlpWallet, __tact_context_get_sender()) )) {
        slice $operation = $Cell$_fun_asSlice($msg'forward_payload~$Slice$_fun_loadRef());
        int $executionFee = $operation~$Slice$_fun_loadCoins();
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_createLiquidityOrder($msg'query_id, false, $msg'sender, $executionFee, $msg'amount);
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
    }
    slice $operation = $Cell$_fun_asSlice($msg'forward_payload~$Slice$_fun_loadRef());
    int $opCode = $operation~load_uint(8);
    if (($opCode == 1)) {
        int $executionFee = $operation~$Slice$_fun_loadCoins();
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_createLiquidityOrder($msg'query_id, true, $msg'sender, $executionFee, $msg'amount);
    } elseif (($opCode == 2)) {
        int $marginDelta = $msg'amount;
        int $executionFee = $operation~$Slice$_fun_loadCoins();
        int $isMarket = $operation~$Slice$_fun_loadBit();
        int $tokenId = $operation~load_uint(16);
        int $isLong = $operation~$Slice$_fun_loadBit();
        int $sizeDelta = $operation~$Slice$_fun_loadCoins();
        int $triggerPrice = $operation~load_uint(128);
        int $requestTime = $operation~load_uint(32);
        slice $tpSl = $Cell$_fun_asSlice($operation~$Slice$_fun_loadRef());
        int $tpSize = $tpSl~$Slice$_fun_loadCoins();
        int $tpPrice = $tpSl~load_uint(128);
        int $slSize = $tpSl~$Slice$_fun_loadCoins();
        int $slPrice = $tpSl~load_uint(128);
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_createIncreasePerpOrder($msg'query_id, $msg'sender, $executionFee, $isMarket, $tokenId, $isLong, $marginDelta, $sizeDelta, $triggerPrice, $tpSize, $tpPrice, $slSize, $slPrice, $requestTime);
    } else {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_refundJetton($msg'query_id, $msg'amount, $msg'sender, $msg'sender);
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_CancelLiquidityOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (int, int, slice) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'orderId, $msg'trxId, $msg'executionFeeReceiver) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(19305, ($ctx'value >= ($self'gasForLpTrader + $self'gasForTransferJetton)));
    tuple $orderOpt = $LiquidityOrder$_load_opt(__tact_dict_get_uint_cell($self'liquidityOrders, 64, $msg'orderId));
    throw_unless(32637, (~ null?($orderOpt)));
    var ($order'isIncrease, $order'account, $order'jettonDelta, $order'executionFee, $order'blockTime, $order'isPending) = $LiquidityOrder$_not_null($orderOpt);
    throw_unless(24173, (~ $order'isPending));
    int $isExecutor = __tact_dict_exists_slice($self'executors, 267, $ctx'sender);
    throw_unless(41207, ( ($isExecutor) ? (true) : (( __tact_slice_eq_bits($order'account, $ctx'sender) )) ));
    if ((~ $isExecutor)) {
        throw_unless(6118, (($order'blockTime + $self'orderLockTime) <= $global_now()));
    }
    $self'liquidityOrders~__tact_dict_delete_uint(64, $msg'orderId);
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferJetton(($order'isIncrease ? $self'jettonWallet : $self'tlpWallet), $msg'trxId, $order'jettonDelta, $order'account, $ctx'sender);
    slice $executionFeeReceiver = ((~ null?($msg'executionFeeReceiver)) ? __tact_not_null($msg'executionFeeReceiver) : $ctx'sender);
    if (($order'executionFee > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode($executionFeeReceiver, $order'executionFee, 2));
        $self'totalExecutionFee = $self'totalExecutionFee - $order'executionFee;
    }
    $global_emit($LiquidityOrderCancelledEvent$_store_cell($LiquidityOrderCancelledEvent$_constructor_opType_orderId_trxId(($order'isIncrease ? 1 : 2), $msg'orderId, $msg'trxId)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferEstimatedRemainValue(($self'gasForLpTrader + $self'gasForTransferJetton), $ctx'sender, (- $order'executionFee));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_ExecuteLiquidityOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (int, int, slice, cell, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'orderId, $msg'trxId, $msg'executionFeeReceiver, $msg'prices, $msg'lpFundingFeeGrowth, $msg'rolloverFeeGrowth) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(41207, __tact_dict_exists_slice($self'executors, 267, $ctx'sender));
    tuple $orderOpt = $LiquidityOrder$_load_opt(__tact_dict_get_uint_cell($self'liquidityOrders, 64, $msg'orderId));
    throw_unless(32637, (~ null?($orderOpt)));
    var ($order'isIncrease, $order'account, $order'jettonDelta, $order'executionFee, $order'blockTime, $order'isPending) = $LiquidityOrder$_not_null($orderOpt);
    throw_unless(24173, (~ $order'isPending));
    int $estimatedGas = $self'gasForLpExecutor;
    if ($order'isIncrease) {
        $estimatedGas = $estimatedGas + $self'gasForMintTlp;
    } else {
        $estimatedGas = $estimatedGas + ($self'gasForBurnTlp + $self'gasForTransferJetton);
    }
    throw_unless(19305, ($ctx'value >= $estimatedGas));
    $order'isPending = true;
    $self'liquidityOrders~__tact_dict_set_uint_cell(64, $msg'orderId, $LiquidityOrder$_store_cell(($order'isIncrease, $order'account, $order'jettonDelta, $order'executionFee, $order'blockTime, $order'isPending)));
    cell $prices = $msg'prices;
    int $globalLPUnrealizedPnl = 0;
    var ($tokenId, $price, $fresh$flag_12) = __tact_dict_min_uint_uint($prices, 16, 128);
    while ($fresh$flag_12) {
        tuple $globalLPPositionOpt = $GlobalLPPosition$_load_opt(__tact_dict_get_uint_cell($self'globalLPPositions, 16, $tokenId));
        if ((~ null?($globalLPPositionOpt))) {
            var ($globalLPPosition'netSize, $globalLPPosition'isLong, $globalLPPosition'entryPrice) = $GlobalLPPosition$_not_null($globalLPPositionOpt);
            $globalLPUnrealizedPnl = $globalLPUnrealizedPnl + ((($globalLPPosition'netSize * ($price - $globalLPPosition'entryPrice)) * ($globalLPPosition'isLong ? 1 : -1)) / 1000000000000000000);
        }
        ($tokenId, $price, $fresh$flag_12) = __tact_dict_next_uint_uint($prices, 16, $tokenId, 128);
    }
    $self'globalLPUnrealizedPnl = $globalLPUnrealizedPnl;
    int $lpFundingFeeGrowthDelta = ($msg'lpFundingFeeGrowth - $self'globalLpFundingFeeGrowth);
    $self'globalLpFundingFeeGrowth = $msg'lpFundingFeeGrowth;
    int $rolloverFeeGrowthDelta = ($msg'rolloverFeeGrowth - $self'globalRolloverFeeGrowth);
    int $lpRolloverFeeGrowthDelta = (($rolloverFeeGrowthDelta * $self'lpRolloverFeeRate) / 1000000000);
    $self'globalRolloverFeeGrowth = $msg'rolloverFeeGrowth;
    $self'globalLPFund = $self'globalLPFund + ($lpFundingFeeGrowthDelta + $lpRolloverFeeGrowthDelta);
    $self'protocolTradingFee = $self'protocolTradingFee + ($rolloverFeeGrowthDelta - $lpRolloverFeeGrowthDelta);
    int $globalNetLP = ($self'globalLPFund + $self'globalLPUnrealizedPnl);
    int $tlpPrice = 0;
    int $jettonDelta = 0;
    int $tlpDelta = 0;
    if ($order'isIncrease) {
        $jettonDelta = $order'jettonDelta;
        int $availableQuota = $global_max(0, ($self'maxLpNetCap - $globalNetLP));
        throw_unless(10594, ($jettonDelta <= $availableQuota));
        $tlpPrice = (($self'tlpSupply == 0) ? 1000000000000000000 : (($globalNetLP * 1000000000000000000) / $self'tlpSupply));
        $tlpDelta = (($jettonDelta * 1000000000000000000) / $tlpPrice);
        $global_send($SendParameters$_constructor_to_value_bounce_body($self'tlpJetton, $self'gasForMintTlp, true, $JettonMint$_store_cell($JettonMint$_constructor_origin_receiver_amount_custom_payload_forward_ton_amount_forward_payload($ctx'sender, $order'account, $tlpDelta, null(), 0, $global_emptySlice()))));
        $self'globalLPFund = $self'globalLPFund + $jettonDelta;
        $self'tlpSupply = $self'tlpSupply + $tlpDelta;
    } else {
        $tlpDelta = $order'jettonDelta;
        $tlpPrice = (($globalNetLP * 1000000000000000000) / $self'tlpSupply);
        $jettonDelta = (($tlpPrice * $tlpDelta) / 1000000000000000000);
        $global_send($SendParameters$_constructor_to_value_bounce_body($self'tlpWallet, $self'gasForBurnTlp, true, $JettonBurn$_store_cell($JettonBurn$_constructor_query_id_amount_response_destination_custom_payload($msg'trxId, $tlpDelta, $ctx'sender, null()))));
        $self'globalLPFund = $self'globalLPFund - $jettonDelta;
        $self'tlpSupply = $self'tlpSupply - $tlpDelta;
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferJetton($self'jettonWallet, $msg'trxId, $jettonDelta, $order'account, $ctx'sender);
    }
    $self'liquidityOrders~__tact_dict_delete_uint(64, $msg'orderId);
    if (($order'executionFee > 0)) {
        slice $receiver = ((~ null?($msg'executionFeeReceiver)) ? __tact_not_null($msg'executionFeeReceiver) : $ctx'sender);
        $global_send($SendParameters$_constructor_to_value_mode($receiver, $order'executionFee, 2));
        $self'totalExecutionFee = $self'totalExecutionFee - $order'executionFee;
    }
    $global_emit($LiquidityPoolChangedEvent$_store_cell($LiquidityPoolChangedEvent$_constructor_trxId_orderId_opType_account_jettonDelta_tlpPrice_tlpDelta_tlpSupply_lpFundAfter_realizedLpFundingFeeDelta_realizedLpRolloverFeeDelta_entryLpFundingFeeGrowth_entryRolloverFeeGrowth($msg'trxId, $msg'orderId, ($order'isIncrease ? 1 : 2), $order'account, $jettonDelta, $tlpPrice, $tlpDelta, $self'tlpSupply, $self'globalLPFund, $lpFundingFeeGrowthDelta, $lpRolloverFeeGrowthDelta, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferEstimatedRemainValue($estimatedGas, $ctx'sender, (- $order'executionFee));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_CreateDecreasePerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (int, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'executionFee, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $msg'triggerPrice, $msg'trxId, $msg'requestTime) = $msg;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_requireNotStopped();
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(19305, (($ctx'value - $msg'executionFee) >= $self'gasForPerpTrader));
    throw_unless(24562, ($msg'executionFee >= $self'perpMinExecutionFee));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_createPerpOrder($msg'trxId, 12, $ctx'sender, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $msg'triggerPrice, $msg'executionFee, $msg'requestTime);
    $self'totalExecutionFee = $self'totalExecutionFee + $msg'executionFee;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferEstimatedRemainValue($self'gasForPerpTrader, $ctx'sender, $msg'executionFee);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_CreateTpSlPerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (int, int, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'executionFee, $msg'tokenId, $msg'isLong, $msg'tpSize, $msg'tpPrice, $msg'slSize, $msg'slPrice, $msg'trxId, $msg'requestTime) = $msg;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_requireNotStopped();
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $executionFeeMultiple = 0;
    if (( (($msg'tpSize > 0)) ? (($msg'tpPrice > 0)) : (false) )) {
        $executionFeeMultiple = $executionFeeMultiple + 1;
    }
    if (( (($msg'slSize > 0)) ? (($msg'slPrice > 0)) : (false) )) {
        $executionFeeMultiple = $executionFeeMultiple + 1;
    }
    throw_unless(19305, (($ctx'value - $msg'executionFee) >= ($self'gasForPerpTrader * $executionFeeMultiple)));
    throw_unless(24562, ($msg'executionFee >= ($self'perpMinExecutionFee * $executionFeeMultiple)));
    if (( (($msg'tpSize > 0)) ? (($msg'tpPrice > 0)) : (false) )) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_createPerpOrder($msg'trxId, 13, $ctx'sender, $msg'tokenId, $msg'isLong, 0, $msg'tpSize, $msg'tpPrice, ($msg'executionFee / $executionFeeMultiple), $msg'requestTime);
    }
    if (( (($msg'slSize > 0)) ? (($msg'slPrice > 0)) : (false) )) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_createPerpOrder($msg'trxId, 14, $ctx'sender, $msg'tokenId, $msg'isLong, 0, $msg'slSize, $msg'slPrice, ($msg'executionFee / $executionFeeMultiple), $msg'requestTime);
    }
    $self'totalExecutionFee = $self'totalExecutionFee + $msg'executionFee;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferEstimatedRemainValue(($self'gasForPerpTrader * $executionFeeMultiple), $ctx'sender, $msg'executionFee);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_CancelPerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (slice, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'executionFeeReceiver, $msg'orderId, $msg'trxId) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    tuple $orderOpt = $PerpOrder$_load_opt(__tact_dict_get_uint_cell($self'perpOrders, 64, $msg'orderId));
    throw_unless(32637, (~ null?($orderOpt)));
    var ($order'opType, $order'tokenId, $order'account, $order'isLong, $order'marginDelta, $order'sizeDelta, $order'triggerPrice, $order'triggerAbove, $order'executionFee, $order'blockTime, $order'isPending) = $PerpOrder$_not_null($orderOpt);
    throw_unless(24173, (~ $order'isPending));
    int $increase = ( (($order'opType == 10)) ? (true) : (($order'opType == 11)) );
    int $gas = $self'gasForPerpExecutor;
    if ($increase) {
        $gas = $gas + $self'gasForTransferJetton;
    }
    throw_unless(19305, ($ctx'value >= $gas));
    int $isExecutor = __tact_dict_exists_slice($self'executors, 267, $ctx'sender);
    throw_unless(41207, ( ($isExecutor) ? (true) : (( __tact_slice_eq_bits($order'account, $ctx'sender) )) ));
    if (( ((~ $isExecutor)) ? (( (($order'opType == 10)) ? (true) : (($order'opType == 12)) )) : (false) )) {
        throw_unless(6118, (($order'blockTime + $self'orderLockTime) <= $global_now()));
    }
    int $executionFee = 0;
    if ($increase) {
        tuple $orderExOpt = $PerpOrderEx$_load_opt(__tact_dict_get_uint_cell($self'perpOrderExs, 64, $msg'orderId));
        if ((~ null?($orderExOpt))) {
            var ($orderEx'tpSize, $orderEx'tpPrice, $orderEx'slSize, $orderEx'slPrice, $orderEx'executionFee) = $PerpOrderEx$_not_null($orderExOpt);
            int $tpSlExecutionFee = 0;
            if (( (($orderEx'tpSize > 0)) ? (($orderEx'tpPrice > 0)) : (false) )) {
                $tpSlExecutionFee = $tpSlExecutionFee + $orderEx'executionFee;
            }
            if (( (($orderEx'slSize > 0)) ? (($orderEx'slPrice > 0)) : (false) )) {
                $tpSlExecutionFee = $tpSlExecutionFee + $orderEx'executionFee;
            }
            if (($tpSlExecutionFee > 0)) {
                $global_send($SendParameters$_constructor_to_value_mode($order'account, $tpSlExecutionFee, 2));
                $executionFee = $executionFee + $tpSlExecutionFee;
            }
            $self'perpOrderExs~__tact_dict_delete_uint(64, $msg'orderId);
        }
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferJetton($self'jettonWallet, $msg'trxId, $order'marginDelta, $order'account, $ctx'sender);
    }
    $self'perpOrders~__tact_dict_delete_uint(64, $msg'orderId);
    if (($order'executionFee > 0)) {
        slice $executionFeeReceiver = (null?($msg'executionFeeReceiver) ? $ctx'sender : __tact_not_null($msg'executionFeeReceiver));
        $global_send($SendParameters$_constructor_to_value_mode($executionFeeReceiver, $order'executionFee, 2));
        $executionFee = $executionFee + $order'executionFee;
    }
    $self'totalExecutionFee = $self'totalExecutionFee - $executionFee;
    $global_emit($PerpOrderCancelledEvent$_store_cell($PerpOrderCancelledEvent$_constructor_opType_orderId_trxId($order'opType, $msg'orderId, $msg'trxId)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferEstimatedRemainValue($gas, $ctx'sender, (- $executionFee));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_ExecutePerpOrder((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (slice, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'executionFeeReceiver, $msg'orderId, $msg'trxId, $msg'tokenId, $msg'price, $msg'premiumRate, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(41207, __tact_dict_exists_slice($self'executors, 267, $ctx'sender));
    tuple $orderOpt = $PerpOrder$_load_opt(__tact_dict_get_uint_cell($self'perpOrders, 64, $msg'orderId));
    throw_unless(32637, (~ null?($orderOpt)));
    var ($order'opType, $order'tokenId, $order'account, $order'isLong, $order'marginDelta, $order'sizeDelta, $order'triggerPrice, $order'triggerAbove, $order'executionFee, $order'blockTime, $order'isPending) = $PerpOrder$_not_null($orderOpt);
    int $increase = ( (($order'opType == 10)) ? (true) : (($order'opType == 11)) );
    if ($increase) {
        throw_unless(19305, ($ctx'value >= $self'gasForPerpExecutor));
    } else {
        throw_unless(19305, ($ctx'value >= ($self'gasForPerpExecutor + $self'gasForTransferJetton)));
    }
    throw_unless(24173, (~ $order'isPending));
    $order'isPending = true;
    $self'perpOrders~__tact_dict_set_uint_cell(64, $msg'orderId, $PerpOrder$_store_cell(($order'opType, $order'tokenId, $order'account, $order'isLong, $order'marginDelta, $order'sizeDelta, $order'triggerPrice, $order'triggerAbove, $order'executionFee, $order'blockTime, $order'isPending)));
    if ((~ ( (($order'opType == 10)) ? (true) : (($order'opType == 12)) ))) {
        throw_unless(1644, ($order'triggerAbove ? ($msg'price >= $order'triggerPrice) : ($msg'price <= $order'triggerPrice)));
    }
    slice $executionFeeReceiver = (null?($msg'executionFeeReceiver) ? $ctx'sender : __tact_not_null($msg'executionFeeReceiver));
    if ($increase) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_increasePerpPosition($msg'trxId, $msg'orderId, $order'opType, $order'account, $order'tokenId, $order'isLong, $order'marginDelta, $order'sizeDelta, $msg'price, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth, $executionFeeReceiver);
    } else {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_decreasePerpPosition($msg'trxId, $msg'orderId, $order'opType, $order'account, $order'tokenId, $order'isLong, $order'marginDelta, $order'sizeDelta, $msg'price, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth, $executionFeeReceiver);
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_LiquidatePerpPosition((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (slice, int, slice, int, int, int, int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'liquidationFeeReceiver, $msg'tokenId, $msg'account, $msg'isLong, $msg'trxId, $msg'price, $msg'premiumRate, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(19305, ($ctx'value >= ($self'gasForPerpExecutor + $self'gasForTransferJetton)));
    throw_unless(41207, __tact_dict_exists_slice($self'executors, 267, $ctx'sender));
    slice $liquidationFeeReceiver = ((~ null?($msg'liquidationFeeReceiver)) ? __tact_not_null($msg'liquidationFeeReceiver) : $ctx'sender);
    int $orderId = $self'perpOrderIndexNext;
    $self'perpOrderIndexNext = $self'perpOrderIndexNext + 1;
    $self'perpOrders~__tact_dict_set_uint_cell(64, $orderId, $PerpOrder$_store_cell($PerpOrder$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_executionFee_blockTime_isPending(3, $msg'tokenId, $msg'account, $msg'isLong, 0, 0, 0, false, 0, $global_now(), true)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_liquidatePerpPosition($msg'trxId, $orderId, $msg'account, $msg'tokenId, $msg'isLong, $msg'price, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth, $liquidationFeeReceiver);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_ADLPerpPosition((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (int, slice, int, int, int, int, int, int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'tokenId, $msg'account, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $msg'trxId, $msg'price, $msg'premiumRate, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(19305, ($ctx'value >= ($self'gasForPerpExecutor + $self'gasForTransferJetton)));
    throw_unless(41207, __tact_dict_exists_slice($self'executors, 267, $ctx'sender));
    int $orderId = $self'perpOrderIndexNext;
    $self'perpOrderIndexNext = $self'perpOrderIndexNext + 1;
    $self'perpOrders~__tact_dict_set_uint_cell(64, $orderId, $PerpOrder$_store_cell($PerpOrder$_constructor_opType_tokenId_account_isLong_marginDelta_sizeDelta_triggerPrice_triggerAbove_executionFee_blockTime_isPending(4, $msg'tokenId, $msg'account, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, 0, false, 0, $global_now(), true)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_decreasePerpPosition($msg'trxId, $orderId, 4, $msg'account, $msg'tokenId, $msg'isLong, $msg'marginDelta, $msg'sizeDelta, $msg'price, $msg'fundingFeeGrowth, $msg'rolloverFeeGrowth, $ctx'sender);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_CreateCompensate((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (int, int, int, slice, int, slice, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'orderType, $msg'orderId, $msg'trxId, $msg'refundReceiver, $msg'refundAmount, $msg'executionFeeReceiver, $msg'executionFee) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits(__tact_context_get_sender(), $self'compensator) ));
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(19305, ($ctx'value >= $self'gasForPerpExecutor));
    int $compensateId = $self'compensateIndexNext;
    $self'compensateIndexNext = $self'compensateIndexNext + 1;
    $self'compensates~__tact_dict_set_uint_cell(64, $compensateId, $Compensate$_store_cell($Compensate$_constructor_orderType_orderId_trxId_refundReceiver_refundAmount_executionFeeReceiver_executionFee_unlockTime($msg'orderType, $msg'orderId, $msg'trxId, $msg'refundReceiver, $msg'refundAmount, $msg'executionFeeReceiver, $msg'executionFee, ($global_now() + 86400))));
    $global_emit($CompensateCreatedEvent$_store_cell($CompensateCreatedEvent$_constructor_compensateId_orderType_orderId_trxId_refundReceiver_refundAmount_executionFeeReceiver_executionFee_unlockTime($compensateId, $msg'orderType, $msg'orderId, $msg'trxId, $msg'refundReceiver, $msg'refundAmount, $msg'executionFeeReceiver, $msg'executionFee, ($global_now() + 86400))));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferEstimatedRemainValue($self'gasForPerpExecutor, __tact_context_get_sender(), 0);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_ExecuteOrCancelCompensate((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (int, int, int) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'isCancel, $msg'compensateId, $msg'trxId) = $msg;
    throw_unless(41207, ( __tact_slice_eq_bits(__tact_context_get_sender(), $self'compensator) ));
    throw_unless(19305, ($Context$_get_value(__tact_context_get()) >= ($self'gasForPerpExecutor + $self'gasForTransferJetton)));
    tuple $compensateOpt = $Compensate$_load_opt(__tact_dict_get_uint_cell($self'compensates, 64, $msg'compensateId));
    throw_unless(11120, (~ null?($compensateOpt)));
    var ($compensate'orderType, $compensate'orderId, $compensate'trxId, $compensate'refundReceiver, $compensate'refundAmount, $compensate'executionFeeReceiver, $compensate'executionFee, $compensate'unlockTime) = $Compensate$_not_null($compensateOpt);
    if ($msg'isCancel) {
        $self'compensates~__tact_dict_delete_uint(64, $msg'compensateId);
        $global_emit($CompensateCancelledEvent$_store_cell($CompensateCancelledEvent$_constructor_compensateId_trxId($msg'compensateId, $msg'trxId)));
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferEstimatedRemainValue($self'gasForPerpExecutor, __tact_context_get_sender(), 0);
        return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
    }
    throw_unless(31425, ($global_now() >= $compensate'unlockTime));
    if ((~ null?($compensate'orderType))) {
        if (__tact_int_eq_nullable_one($compensate'orderType, 1)) {
            $self'liquidityOrders~__tact_dict_delete_uint(64, $compensate'orderId);
        } else {
            $self'perpOrders~__tact_dict_delete_uint(64, $compensate'orderId);
            $self'perpOrderExs~__tact_dict_delete_uint(64, $compensate'orderId);
        }
    }
    int $needRefund = ( ((~ null?($compensate'refundReceiver))) ? (($compensate'refundAmount > 0)) : (false) );
    if ($needRefund) {
        ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferJetton($self'jettonWallet, $compensate'trxId, $compensate'refundAmount, __tact_not_null($compensate'refundReceiver), __tact_context_get_sender());
    }
    if (( ((~ null?($compensate'executionFeeReceiver))) ? (($compensate'executionFee > 0)) : (false) )) {
        $global_send($SendParameters$_constructor_to_bounce_value_mode(__tact_not_null($compensate'executionFeeReceiver), true, $compensate'executionFee, 2));
    }
    $self'compensates~__tact_dict_delete_uint(64, $msg'compensateId);
    $global_emit($CompensateExecutedEvent$_store_cell($CompensateExecutedEvent$_constructor_compensateId_trxId($msg'compensateId, $compensate'trxId)));
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_transferEstimatedRemainValue(($self'gasForPerpExecutor + ($needRefund ? $self'gasForTransferJetton : 0)), __tact_context_get_sender(), 0);
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_Deploy((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_internal_text_6c8f44f45fedb4cdfed4de8db14aa5b13ad55d430f759d0669210b74c48fe3df((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_requireOwner();
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_requireStopped();
    $self'stopped = false;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_reply(__gen_cell_comment_514f593ead485926515219a03034c6b162f1c29390f83f2f1bd70b8b77731ec3());
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), ()) $Pool$_internal_text_bcfaf776907c719cc8d379d8f194aaaa27e8ca2871cd591781721f215a454501((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_requireOwner();
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_requireNotStopped();
    $self'stopped = true;
    ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth)~$Pool$_fun_reply(__gen_cell_comment_8f4b6a166554b4f282855d0333c627d5b58d281ea4ba11e4def91a1053193b2d());
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

(((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int)), ()) $Pool$_internal_binary_UpdateContract((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) $self, (slice, slice) $msg) impure inline {
    var ($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth) = $self;
    var ($msg'code, $msg'data) = $msg;
    $global_nativeSetCode($Builder$_fun_endCell($Builder$_fun_storeSlice($global_beginCell(), $msg'code)));
    if ((~ null?($msg'data))) {
        $global_nativeSetData($Builder$_fun_endCell($Builder$_fun_storeSlice($global_beginCell(), __tact_not_null($msg'data))));
    }
    return (($self'owner, $self'stopped, $self'orderLockTime, $self'maxLpNetCap, $self'lpRolloverFeeRate, $self'liquidatedPositionShareRate, $self'normalPositionShareRate, $self'gasForPerpTrader, $self'gasForPerpExecutor, $self'gasForLpTrader, $self'gasForLpExecutor, $self'gasForTransferJetton, $self'gasForBurnTlp, $self'gasForMintTlp, $self'lpMinExecutionFee, $self'perpMinExecutionFee, $self'minTonsForStorage, $self'tlpJetton, $self'tlpWallet, $self'jettonWallet, $self'compensator, $self'claimer, $self'executors, $self'tokenConfigs, $self'liquidityOrders, $self'liquidityOrderIndexNext, $self'perpOrders, $self'perpOrderExs, $self'perpOrderIndexNext, $self'compensates, $self'compensateIndexNext, $self'perpPositionIndexNext, $self'perpPositions, $self'globalLPPositions, $self'globalPositions, $self'tlpSupply, $self'totalExecutionFee, $self'protocolTradingFee, $self'globalLPFund, $self'globalLPUnrealizedPnl, $self'globalLpFundingFeeGrowth, $self'globalRolloverFeeGrowth), ());
}

;;
;; Get methods of a Contract Pool
;;

_ %accountInfo(slice $account) method_id(121500) {
    slice $account = __tact_verify_address($account);
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_accountInfo($account);
    return $AccountInfo$_to_external(res);
}

_ %perpPosition(int $tokenId, slice $account) method_id(105096) {
    int $tokenId = $tokenId;
    slice $account = null?($account) ? null() : __tact_verify_address($account);
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_perpPosition($tokenId, $account);
    return $PerpPositionData$_to_external(res);
}

_ %configData() method_id(82657) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_configData();
    return $ConfigData$_to_external(res);
}

_ %tokenConfig(int $tokenId) method_id(124956) {
    int $tokenId = $tokenId;
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_tokenConfig($tokenId);
    return $TokenConfig$_to_opt_external(res);
}

_ %poolStat() method_id(93492) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_poolStat();
    return $PoolStat$_to_external(res);
}

_ %liquidityOrder(int $orderId) method_id(101616) {
    int $orderId = $orderId;
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_liquidityOrder($orderId);
    return $LiquidityOrderData$_to_external(res);
}

_ %perpOrder(int $orderId) method_id(129518) {
    int $orderId = $orderId;
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_perpOrder($orderId);
    return $PerpOrderData$_to_external(res);
}

_ %compensate(int $compensateId) method_id(98837) {
    int $compensateId = $compensateId;
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_compensate($compensateId);
    return $CompensateData$_to_external(res);
}

_ %stopped() method_id(74107) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_stopped();
    return res;
}

_ %owner() method_id(83229) {
    var self = $Pool$_contract_load();
    var res = self~$Pool$_fun_owner();
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Pool
;;

((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int), int) $Pool$_contract_router_internal((slice, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, slice, slice, slice, slice, slice, cell, cell, cell, int, cell, cell, int, cell, int, int, cell, cell, cell, int, int, int, int, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive UpdateConfig message
    if (op == 3172709201) {
        var msg = in_msg~$UpdateConfig$_load();
        self~$Pool$_internal_binary_UpdateConfig(msg);
        return (self, true);
    }
    
    ;; Receive JettonUpdateContent message
    if (op == 1536108317) {
        var msg = in_msg~$JettonUpdateContent$_load();
        self~$Pool$_internal_binary_JettonUpdateContent(msg);
        return (self, true);
    }
    
    ;; Receive ListToken message
    if (op == 3835378672) {
        var msg = in_msg~$ListToken$_load();
        self~$Pool$_internal_binary_ListToken(msg);
        return (self, true);
    }
    
    ;; Receive DelistToken message
    if (op == 2604852463) {
        var msg = in_msg~$DelistToken$_load();
        self~$Pool$_internal_binary_DelistToken(msg);
        return (self, true);
    }
    
    ;; Receive ClaimProtocolFee message
    if (op == 4273121126) {
        var msg = in_msg~$ClaimProtocolFee$_load();
        self~$Pool$_internal_binary_ClaimProtocolFee(msg);
        return (self, true);
    }
    
    ;; Receive empty message
    if ((op == 0) & (slice_bits(in_msg) <= 32)) {
        self~%$Pool$_internal_empty();
        return (self, true);
    }
    
    ;; Receive JettonTransferNotification message
    if (op == 0x7362d09c) {
        var msg = in_msg~$JettonTransferNotification$_load();
        self~$Pool$_internal_binary_JettonTransferNotification(msg);
        return (self, true);
    }
    
    ;; Receive CancelLiquidityOrder message
    if (op == 1209955681) {
        var msg = in_msg~$CancelLiquidityOrder$_load();
        self~$Pool$_internal_binary_CancelLiquidityOrder(msg);
        return (self, true);
    }
    
    ;; Receive ExecuteLiquidityOrder message
    if (op == 2882492539) {
        var msg = in_msg~$ExecuteLiquidityOrder$_load();
        self~$Pool$_internal_binary_ExecuteLiquidityOrder(msg);
        return (self, true);
    }
    
    ;; Receive CreateDecreasePerpOrder message
    if (op == 4009071181) {
        var msg = in_msg~$CreateDecreasePerpOrder$_load();
        self~$Pool$_internal_binary_CreateDecreasePerpOrder(msg);
        return (self, true);
    }
    
    ;; Receive CreateTpSlPerpOrder message
    if (op == 4182737083) {
        var msg = in_msg~$CreateTpSlPerpOrder$_load();
        self~$Pool$_internal_binary_CreateTpSlPerpOrder(msg);
        return (self, true);
    }
    
    ;; Receive CancelPerpOrder message
    if (op == 161477795) {
        var msg = in_msg~$CancelPerpOrder$_load();
        self~$Pool$_internal_binary_CancelPerpOrder(msg);
        return (self, true);
    }
    
    ;; Receive ExecutePerpOrder message
    if (op == 3983970926) {
        var msg = in_msg~$ExecutePerpOrder$_load();
        self~$Pool$_internal_binary_ExecutePerpOrder(msg);
        return (self, true);
    }
    
    ;; Receive LiquidatePerpPosition message
    if (op == 1189008210) {
        var msg = in_msg~$LiquidatePerpPosition$_load();
        self~$Pool$_internal_binary_LiquidatePerpPosition(msg);
        return (self, true);
    }
    
    ;; Receive ADLPerpPosition message
    if (op == 3588145116) {
        var msg = in_msg~$ADLPerpPosition$_load();
        self~$Pool$_internal_binary_ADLPerpPosition(msg);
        return (self, true);
    }
    
    ;; Receive CreateCompensate message
    if (op == 4231235453) {
        var msg = in_msg~$CreateCompensate$_load();
        self~$Pool$_internal_binary_CreateCompensate(msg);
        return (self, true);
    }
    
    ;; Receive ExecuteOrCancelCompensate message
    if (op == 2296903975) {
        var msg = in_msg~$ExecuteOrCancelCompensate$_load();
        self~$Pool$_internal_binary_ExecuteOrCancelCompensate(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Pool$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Receive UpdateContract message
    if (op == 783354075) {
        var msg = in_msg~$UpdateContract$_load();
        self~$Pool$_internal_binary_UpdateContract(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Resume" message
        if (text_op == 0x6c8f44f45fedb4cdfed4de8db14aa5b13ad55d430f759d0669210b74c48fe3df) {
            self~$Pool$_internal_text_6c8f44f45fedb4cdfed4de8db14aa5b13ad55d430f759d0669210b74c48fe3df();
            return (self, true);
        }
        
        ;; Receive "Stop" message
        if (text_op == 0xbcfaf776907c719cc8d379d8f194aaaa27e8ca2871cd591781721f215a454501) {
            self~$Pool$_internal_text_bcfaf776907c719cc8d379d8f194aaaa27e8ca2871cd591781721f215a454501();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Pool$_contract_load();
    
    ;; Handle operation
    int handled = self~$Pool$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Pool$_contract_store(self);
}
